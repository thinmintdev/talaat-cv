[
  {
    "title": "A Deep Dive Into Claude Code Customization",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "A comprehensive guide to customizing Claude Code, from CLAUDE.md basics to advanced SuperClaude frameworks and MCP integrations.",
    "tags": [
      "Claude Code",
      "Customization",
      "AI Tools",
      "SuperClaude",
      "MCP"
    ],
    "draft": false,
    "featured": true,
    "body": {
      "raw": "\n![Claude Code Logo](/images/claude-code-logo.png)\n\nClaude Code has revolutionized how developers interact with AI for coding tasks. But the real power lies in customization—transforming this already powerful tool into a personalized development companion. This comprehensive guide explores everything from basic CLAUDE.md configurations to advanced SuperClaude frameworks and MCP integrations.\n\n## Understanding Claude Code’s Customization Landscape\nClaude Code offers multiple layers of customization, each serving different needs:\n\n- **CLAUDE.md files:** Project-specific and global instructions\n- **Custom commands:** Slash commands and workflows\n- **MCP tools:** Model Context Protocol integrations\n- **VSCode extensions:** Enhanced IDE integration\n- **SuperClaude frameworks:** Advanced automation systems\n\n## CLAUDE.md: The Foundation of Customization\n### Global vs Project-Specific Instructions\nThe CLAUDE.md file is Claude Code’s primary customization mechanism. You can place these files in two locations:\n\n- **Global instructions (applies to all projects):** `~/.claude/CLAUDE.md`\n- **Project-specific instructions:** `/your-project/CLAUDE.md`\n\n### Basic CLAUDE.md Structure\nHere’s a minimal but effective CLAUDE.md template:\n\n```markdown\n# Project Instructions for Claude Code\n\n## Project Overview\nThis is a [framework] project with [specific requirements].\n\n## Development Commands\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run test` - Run test suite\n\n## Code Style & Conventions\n- Use TypeScript for all new files\n- Follow ESLint rules without exceptions\n- Prefer functional components in React\n- Use descriptive variable names\n\n## Architecture Guidelines\n- Follow the existing folder structure\n- Place components in `src/components/`\n- Keep utilities in `src/lib/`\n- Store types in `src/types/`\n\n## Quality Standards\n- All code must pass TypeScript checks\n- Maintain 80%+ test coverage\n- Use meaningful commit messages\n- Document complex functions\n```\n\n### Advanced CLAUDE.md Patterns\nFor complex projects, structure your instructions with sections:\n\n```markdown\n# Advanced Project Configuration\n\n## Context & Background\n@ARCHITECTURE.md\n@CONVENTIONS.md\n@DEPENDENCIES.md\n\n## Custom Commands\n### /component [name]\nCreate a new React component with:\n- TypeScript interface\n- Styled with Tailwind CSS\n- Unit tests included\n- Storybook story\n\n### /api [endpoint]\nGenerate API endpoint with:\n- Input validation (Zod)\n- Error handling\n- OpenAPI documentation\n- Integration tests\n\n## Automated Workflows\n- Run `npm run lint` before any commit\n- Execute full test suite on significant changes\n- Update documentation for API changes\n```\n\n## SuperClaude Framework: Next-Level Automation\nSuperClaude is an advanced framework that extends Claude Code with sophisticated automation patterns.\n\n### Installation and Setup\n```bash\n# Clone SuperClaude framework\ngit clone https://github.com/superclaude/framework.git ~/.claude/superclaude\n\n# Install dependencies\ncd ~/.claude/superclaude && npm install\n\n# Link to Claude Code\necho \"@~/.claude/superclaude/CLAUDE.md\" >> ~/.claude/CLAUDE.md\n```\n\n### Core SuperClaude Components\n- **Personas:** Specialized AI behavior patterns\n- **MCP Integration:** Automatic server coordination\n- **Wave Orchestration:** Multi-stage task execution\n\n#### Persona Activation\n```\n--persona-architect    # Systems design focus\n--persona-frontend     # UI/UX optimization  \n--persona-backend      # API and data focus\n--persona-security     # Security-first approach\n--persona-performance  # Speed optimization\n```\n\n#### MCP Server Auto-Activation\n```\n--c7 / --context7      # Documentation lookup\n--seq / --sequential   # Complex analysis\n--magic                # UI generation\n--playwright           # Testing automation\n```\n\n#### Wave System\n```\n--wave-mode auto       # Automatic complexity detection\n--wave-strategy progressive  # Iterative enhancement\n--delegate auto        # Intelligent task distribution\n```\n\n### Example SuperClaude Configuration\n```yaml\n# ~/.claude/superclaude/config.yml\npersonas:\n  default: architect\n  frontend_projects: frontend\n  api_projects: backend\n\nmcp_servers:\n  auto_activate: true\n  preferred: [context7, sequential, magic]\n\nwave_orchestration:\n  complexity_threshold: 0.7\n  auto_delegation: true\n  max_concurrent: 5\n\nquality_gates:\n  typescript_check: true\n  lint_validation: true\n  test_coverage: 80\n```\n\n## Custom Commands and Slash Commands\n### Creating Project-Specific Commands\nDefine custom commands in your CLAUDE.md:\n\n```markdown\n## Custom Commands\n\n### /scaffold [type] [name]\n**Usage**: `/scaffold component UserProfile`\n**Actions**:\n1. Create component file with TypeScript\n2. Generate corresponding test file\n3. Add to index exports\n4. Create Storybook story\n\n### /migrate [from] [to]\n**Usage**: `/migrate redux zustand`\n**Actions**:\n1. Analyze current state management\n2. Create migration plan\n3. Implement new solution\n4. Update all dependents\n5. Remove old dependencies\n\n### /optimize [target]\n**Usage**: `/optimize bundle`\n**Actions**:\n1. Analyze bundle size\n2. Identify optimization opportunities\n3. Implement code splitting\n4. Update build configuration\n5. Validate performance improvements\n```\n\n### Advanced Command Patterns\nUse command composition for complex workflows:\n\n```markdown\n### /deploy [environment]\n**Prerequisite Commands**: \n- `/build --production`\n- `/test --coverage`\n- `/security-scan`\n\n**Actions**:\n1. Validate all prerequisites pass\n2. Generate deployment artifacts  \n3. Update environment configuration\n4. Execute deployment pipeline\n5. Run post-deployment verification\n6. Update documentation\n```\n\n## MCP Tools: Extending Capabilities\nModel Context Protocol (MCP) tools provide specialized functionality for Claude Code.\n\n### Essential MCP Tools\n- **Context7:** Documentation and research\n- **Sequential:** Complex analysis and reasoning\n- **Magic:** UI component generation\n\n#### Installation\n```bash\nnpm install -g @context7/mcp-server\nnpm install -g @sequential/mcp-server\nnpm install -g @magic/mcp-server\n```\n\n#### Configuration in Claude Code\n```yaml\nmcp_servers:\n  context7:\n    command: \"npx @context7/mcp-server\"\n    args: [\"--port\", \"3001\"]\n```\n\n#### Usage patterns\n```\n--seq          # Enable for complex debugging\n--think        # Multi-file analysis (4K tokens)\n--think-hard   # Deep analysis (10K tokens)  \n--ultrathink   # Critical analysis (32K tokens)\n```\n\n#### Magic: UI component generation\n- React/Vue/Angular components\n- Design system integration\n- Accessibility compliance\n- Responsive design patterns\n\n### Custom MCP Tool Development\nCreate your own MCP tools for specialized needs:\n\n```ts\n// custom-mcp-tool/src/server.ts\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\n \nconst server = new Server({\n  name: 'custom-tool',\n  version: '1.0.0'\n});\n \n// Register custom tools\nserver.setRequestHandler('tools/list', async () => ({\n  tools: [{\n    name: 'analyze_dependencies',\n    description: 'Analyze project dependencies for security and updates',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string' }\n      }\n    }\n  }]\n}));\n \nserver.setRequestHandler('tools/call', async (request) => {\n  const { name, arguments: args } = request.params;\n  \n  if (name === 'analyze_dependencies') {\n    // Your custom logic here\n    return {\n      content: [{\n        type: 'text',\n        text: 'Dependency analysis results...'\n      }]\n    };\n  }\n});\n```\n\n## VSCode Integration and Extensions\n### Claude Code VSCode Extension\nThe official extension provides seamless integration:\n\n```json\n// .vscode/settings.json\n{\n  \"claude.autoActivate\": true,\n  \"claude.customCommands\": [\n    {\n      \"name\": \"Generate Component\",\n      \"command\": \"/component\",\n      \"scope\": \"selection\"\n    },\n    {\n      \"name\": \"Optimize Function\", \n      \"command\": \"/optimize\",\n      \"scope\": \"function\"\n    }\n  ],\n  \"claude.mcp.autoLoad\": [\"context7\", \"sequential\"],\n  \"claude.personas.default\": \"architect\"\n}\n```\n\n### Complementary Extensions\nEssential extensions for Claude Code workflow:\n\n```json\n{\n  \"recommendations\": [\n    \"anthropic.claude-code\",           // Core Claude integration\n    \"ms-python.python\",               // Python support\n    \"bradlc.vscode-tailwindcss\",      // Tailwind intellisense\n    \"ms-vscode.vscode-typescript-next\", // TypeScript support\n    \"esbenp.prettier-vscode\",         // Code formatting\n    \"ms-playwright.playwright\",       // Testing integration\n    \"github.copilot\",                 // AI pair programming\n    \"gruntfuggly.todo-tree\"          // TODO management\n  ]\n}\n```\n\n### Custom VSCode Commands\nCreate project-specific commands:\n\n```json\n// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Claude: Generate Tests\",\n      \"type\": \"shell\", \n      \"command\": \"claude\",\n      \"args\": [\"/test\", \"${relativeFile}\"],\n      \"group\": \"build\"\n    },\n    {\n      \"label\": \"Claude: Optimize Performance\",\n      \"type\": \"shell\",\n      \"command\": \"claude\", \n      \"args\": [\"/optimize\", \"--focus\", \"performance\"],\n      \"group\": \"build\"\n    }\n  ]\n}\n```\n\n## Practical Examples and Use Cases\n### Example 1: React Component Factory\n#### /component [name] [type?]\nCreates a complete React component with:\n- TypeScript interfaces\n- Styled with design system\n- Unit tests with React Testing Library\n- Storybook stories\n- Documentation\n\n**Usage**: `/component UserCard --type data-display`\n\n**Generated Structure**:\n```\nsrc/components/UserCard/\n├── index.ts # Barrel export\n├── UserCard.tsx # Main component\n├── UserCard.test.tsx # Unit tests\n├── UserCard.stories.tsx # Storybook\n├── UserCard.module.css # Styles\n└── types.ts # TypeScript interfaces\n```\n\n### Example 2: API Endpoint Generator\n#### /api [method] [path]\nGenerates complete API endpoint with:\n- Input validation (Zod schemas)\n- Database operations (Prisma/Drizzle)\n- Error handling middleware\n- OpenAPI documentation\n- Integration tests\n\n**Usage**: `/api POST /users`\n\n**Generated Files**:\n- `src/api/users/route.ts` - Route handler\n- `src/lib/validation/users.ts` - Zod schemas\n- `src/types/api/users.ts` - TypeScript types\n- `tests/api/users.test.ts` - Integration tests\n- `docs/api/users.md` - Documentation\n\n### Example 3: Performance Optimization Workflow\n#### /optimize [target] [--metrics]\nComprehensive performance optimization:\n\n**Usage**: `/optimize bundle --metrics lighthouse`\n\n**Workflow**:\n1. Analyze current performance metrics\n2. Identify bottlenecks and opportunities\n3. Implement optimizations:\n   - Code splitting\n   - Tree shaking\n   - Image optimization\n   - Caching strategies\n4. Validate improvements\n5. Generate performance report\n```\n\n## Repository Resources and Tools\n### Essential Repositories\n- **SuperClaude Framework**\n  - SuperClaude Core - Main framework\n  - SuperClaude Templates - Project templates\n  - SuperClaude Personas - AI behavior patterns\n- **MCP Tools Collection**\n  - Context7 MCP - Documentation lookup\n  - Sequential MCP - Complex analysis\n  - Magic MCP - UI generation\n  - Playwright MCP - Testing automation\n- **Community Tools**\n  - Claude Code Utils - Utility functions\n  - Claude Workflows - Workflow examples\n  - Claude Plugins - Plugin registry\n\n### Configuration Templates\n- **Starter Templates:**\n  - React + TypeScript + Tailwind\n    - `git clone https://github.com/superclaude/templates/react-ts-tailwind`\n  - Next.js Full-Stack  \n    - `git clone https://github.com/superclaude/templates/nextjs-fullstack`\n  - Node.js API\n    - `git clone https://github.com/superclaude/templates/nodejs-api`\n  - Python FastAPI\n    - `git clone https://github.com/superclaude/templates/python-fastapi`\n\n## Best Practices and Advanced Configurations\n### Performance Optimization\n#### Token Management:\n\n```yaml\n## Efficiency Settings\n--uc                    # Ultra-compressed mode (30-50% token reduction)\n--answer-only          # Skip workflow automation\n--delegate auto        # Intelligent task distribution\n--concurrency 5        # Parallel processing\n```\n\n#### Caching Strategies:\n\n```yaml\n## Caching Configuration\nmcp_cache:\n  enabled: true\n  ttl: 3600             # 1 hour cache\n  max_size: 100MB\n \ncontext_cache:\n  project_analysis: 24h\n  dependency_lookup: 1h\n  documentation: 7d\n```\n\n### Security Considerations\n#### Safe Practices:\n\n- Never include API keys in CLAUDE.md\n- Use environment variables for secrets\n- Validate all generated code\n- Review MCP tool permissions\n- Audit custom commands regularly\n\n#### Recommended .gitignore additions\n```\n.claude/secrets/\n.claude/cache/\n.claude/logs/\n```\n\n### Team Collaboration\n#### Shared Configurations:\n\n- Commit shared CLAUDE.md to repository\n- Document custom commands in `docs/claude-commands.md`\n- Share MCP tool configurations in `.claude/team-config.yml`\n\n### Troubleshooting Common Issues\n#### Performance Issues:\n\n- Check MCP server status: `claude mcp status`\n- Clear caches: `claude cache clear`\n- Reduce token usage: `claude config --compression-mode aggressive`\n\n#### Configuration Conflicts:\n\n- Validate CLAUDE.md syntax: `claude validate .`\n- Test custom commands: `claude test-command /component TestComponent`\n- Debug MCP connections: `claude mcp debug --server context7`\n\n## Future Directions and Advanced Patterns\n### Emerging Patterns\n- AI-Driven Development Workflows\n  - Intelligent code review automation\n  - Predictive bug detection\n  - Automated dependency updates\n  - Context-aware documentation generation\n- Integration Possibilities\n  - GitHub Actions integration\n  - CI/CD pipeline automation\n  - Monitoring and alerting systems\n  - Code quality metric tracking\n- Community Contributions\n  - Create MCP Tools: Develop specialized tools for your domain\n  - Share Templates: Contribute project templates and configurations\n  - Document Patterns: Share successful customization patterns\n  - Build Integrations: Create integrations with popular tools\n\n## Conclusion\nClaude Code customization transforms a powerful AI coding assistant into a personalized development ecosystem. From simple CLAUDE.md instructions to sophisticated SuperClaude frameworks, the customization options are virtually limitless.\n\nStart with basic project instructions, experiment with custom commands, integrate MCP tools for specialized functionality, and gradually build toward advanced automation patterns. The key is iterative improvement—each customization should solve a real problem and improve your development workflow.\n\nThe Claude Code ecosystem is rapidly evolving, with new tools, frameworks, and patterns emerging regularly. Stay engaged with the community, contribute your innovations, and help shape the future of AI-assisted development.\n\nRemember: the best customizations are those that seamlessly integrate into your existing workflow while amplifying your productivity and code quality. Start simple, iterate often, and let your unique development needs guide your customization journey.\n",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!C.call(t,o)&&o!==i&&r(t,o,{get:()=>e[o],enumerable:!(l=h(e,o))||l.enumerable});return t};var v=(t,e,i)=>(i=t!=null?u(g(t)):{},a(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>a(r({},\"__esModule\",{value:!0}),t);var s=f((A,c)=>{c.exports=_jsx_runtime});var x={};y(x,{default:()=>m,frontmatter:()=>S});var n=v(s()),S={title:\"A Deep Dive Into Claude Code Customization\",publishedAt:\"2025-08-08\",summary:\"A comprehensive guide to customizing Claude Code, from CLAUDE.md basics to advanced SuperClaude frameworks and MCP integrations.\",tags:[\"Claude Code\",\"Customization\",\"AI Tools\",\"SuperClaude\",\"MCP\"],featured:!0,featuredImage:\"/images/claude-code-logo.png\"};function d(t){let e={code:\"code\",h2:\"h2\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/images/claude-code-logo.png\",alt:\"Claude Code Logo\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Claude Code has revolutionized how developers interact with AI for coding tasks. But the real power lies in customization\\u2014transforming this already powerful tool into a personalized development companion. This comprehensive guide explores everything from basic CLAUDE.md configurations to advanced SuperClaude frameworks and MCP integrations.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Understanding Claude Code\\u2019s Customization Landscape\"}),`\n`,(0,n.jsx)(e.p,{children:\"Claude Code offers multiple layers of customization, each serving different needs:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"CLAUDE.md files:\"}),\" Project-specific and global instructions\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Custom commands:\"}),\" Slash commands and workflows\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"MCP tools:\"}),\" Model Context Protocol integrations\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"VSCode extensions:\"}),\" Enhanced IDE integration\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"SuperClaude frameworks:\"}),\" Advanced automation systems\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"CLAUDE.md: The Foundation of Customization\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Global vs Project-Specific Instructions\"}),`\n`,(0,n.jsx)(e.p,{children:\"The CLAUDE.md file is Claude Code\\u2019s primary customization mechanism. You can place these files in two locations:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Global instructions (applies to all projects):\"}),\" \",(0,n.jsx)(e.code,{children:\"~/.claude/CLAUDE.md\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Project-specific instructions:\"}),\" \",(0,n.jsx)(e.code,{children:\"/your-project/CLAUDE.md\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Basic CLAUDE.md Structure\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s a minimal but effective CLAUDE.md template:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-markdown\",children:`# Project Instructions for Claude Code\n\n## Project Overview\nThis is a [framework] project with [specific requirements].\n\n## Development Commands\n- \\`npm run dev\\` - Start development server\n- \\`npm run build\\` - Build for production\n- \\`npm run test\\` - Run test suite\n\n## Code Style & Conventions\n- Use TypeScript for all new files\n- Follow ESLint rules without exceptions\n- Prefer functional components in React\n- Use descriptive variable names\n\n## Architecture Guidelines\n- Follow the existing folder structure\n- Place components in \\`src/components/\\`\n- Keep utilities in \\`src/lib/\\`\n- Store types in \\`src/types/\\`\n\n## Quality Standards\n- All code must pass TypeScript checks\n- Maintain 80%+ test coverage\n- Use meaningful commit messages\n- Document complex functions\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Advanced CLAUDE.md Patterns\"}),`\n`,(0,n.jsx)(e.p,{children:\"For complex projects, structure your instructions with sections:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-markdown\",children:`# Advanced Project Configuration\n\n## Context & Background\n@ARCHITECTURE.md\n@CONVENTIONS.md\n@DEPENDENCIES.md\n\n## Custom Commands\n### /component [name]\nCreate a new React component with:\n- TypeScript interface\n- Styled with Tailwind CSS\n- Unit tests included\n- Storybook story\n\n### /api [endpoint]\nGenerate API endpoint with:\n- Input validation (Zod)\n- Error handling\n- OpenAPI documentation\n- Integration tests\n\n## Automated Workflows\n- Run \\`npm run lint\\` before any commit\n- Execute full test suite on significant changes\n- Update documentation for API changes\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"SuperClaude Framework: Next-Level Automation\"}),`\n`,(0,n.jsx)(e.p,{children:\"SuperClaude is an advanced framework that extends Claude Code with sophisticated automation patterns.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Installation and Setup\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`# Clone SuperClaude framework\ngit clone https://github.com/superclaude/framework.git ~/.claude/superclaude\n\n# Install dependencies\ncd ~/.claude/superclaude && npm install\n\n# Link to Claude Code\necho \"@~/.claude/superclaude/CLAUDE.md\" >> ~/.claude/CLAUDE.md\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Core SuperClaude Components\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Personas:\"}),\" Specialized AI behavior patterns\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"MCP Integration:\"}),\" Automatic server coordination\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Wave Orchestration:\"}),\" Multi-stage task execution\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Persona Activation\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`--persona-architect    # Systems design focus\n--persona-frontend     # UI/UX optimization  \n--persona-backend      # API and data focus\n--persona-security     # Security-first approach\n--persona-performance  # Speed optimization\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"MCP Server Auto-Activation\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`--c7 / --context7      # Documentation lookup\n--seq / --sequential   # Complex analysis\n--magic                # UI generation\n--playwright           # Testing automation\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Wave System\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`--wave-mode auto       # Automatic complexity detection\n--wave-strategy progressive  # Iterative enhancement\n--delegate auto        # Intelligent task distribution\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Example SuperClaude Configuration\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`# ~/.claude/superclaude/config.yml\npersonas:\n  default: architect\n  frontend_projects: frontend\n  api_projects: backend\n\nmcp_servers:\n  auto_activate: true\n  preferred: [context7, sequential, magic]\n\nwave_orchestration:\n  complexity_threshold: 0.7\n  auto_delegation: true\n  max_concurrent: 5\n\nquality_gates:\n  typescript_check: true\n  lint_validation: true\n  test_coverage: 80\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Custom Commands and Slash Commands\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Creating Project-Specific Commands\"}),`\n`,(0,n.jsx)(e.p,{children:\"Define custom commands in your CLAUDE.md:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-markdown\",children:`## Custom Commands\n\n### /scaffold [type] [name]\n**Usage**: \\`/scaffold component UserProfile\\`\n**Actions**:\n1. Create component file with TypeScript\n2. Generate corresponding test file\n3. Add to index exports\n4. Create Storybook story\n\n### /migrate [from] [to]\n**Usage**: \\`/migrate redux zustand\\`\n**Actions**:\n1. Analyze current state management\n2. Create migration plan\n3. Implement new solution\n4. Update all dependents\n5. Remove old dependencies\n\n### /optimize [target]\n**Usage**: \\`/optimize bundle\\`\n**Actions**:\n1. Analyze bundle size\n2. Identify optimization opportunities\n3. Implement code splitting\n4. Update build configuration\n5. Validate performance improvements\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Advanced Command Patterns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use command composition for complex workflows:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-markdown\",children:`### /deploy [environment]\n**Prerequisite Commands**: \n- \\`/build --production\\`\n- \\`/test --coverage\\`\n- \\`/security-scan\\`\n\n**Actions**:\n1. Validate all prerequisites pass\n2. Generate deployment artifacts  \n3. Update environment configuration\n4. Execute deployment pipeline\n5. Run post-deployment verification\n6. Update documentation\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"MCP Tools: Extending Capabilities\"}),`\n`,(0,n.jsx)(e.p,{children:\"Model Context Protocol (MCP) tools provide specialized functionality for Claude Code.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Essential MCP Tools\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Context7:\"}),\" Documentation and research\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sequential:\"}),\" Complex analysis and reasoning\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Magic:\"}),\" UI component generation\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Installation\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`npm install -g @context7/mcp-server\nnpm install -g @sequential/mcp-server\nnpm install -g @magic/mcp-server\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Configuration in Claude Code\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`mcp_servers:\n  context7:\n    command: \"npx @context7/mcp-server\"\n    args: [\"--port\", \"3001\"]\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Usage patterns\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`--seq          # Enable for complex debugging\n--think        # Multi-file analysis (4K tokens)\n--think-hard   # Deep analysis (10K tokens)  \n--ultrathink   # Critical analysis (32K tokens)\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Magic: UI component generation\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"React/Vue/Angular components\"}),`\n`,(0,n.jsx)(e.li,{children:\"Design system integration\"}),`\n`,(0,n.jsx)(e.li,{children:\"Accessibility compliance\"}),`\n`,(0,n.jsx)(e.li,{children:\"Responsive design patterns\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Custom MCP Tool Development\"}),`\n`,(0,n.jsx)(e.p,{children:\"Create your own MCP tools for specialized needs:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// custom-mcp-tool/src/server.ts\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\n \nconst server = new Server({\n  name: 'custom-tool',\n  version: '1.0.0'\n});\n \n// Register custom tools\nserver.setRequestHandler('tools/list', async () => ({\n  tools: [{\n    name: 'analyze_dependencies',\n    description: 'Analyze project dependencies for security and updates',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: { type: 'string' }\n      }\n    }\n  }]\n}));\n \nserver.setRequestHandler('tools/call', async (request) => {\n  const { name, arguments: args } = request.params;\n  \n  if (name === 'analyze_dependencies') {\n    // Your custom logic here\n    return {\n      content: [{\n        type: 'text',\n        text: 'Dependency analysis results...'\n      }]\n    };\n  }\n});\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"VSCode Integration and Extensions\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Claude Code VSCode Extension\"}),`\n`,(0,n.jsx)(e.p,{children:\"The official extension provides seamless integration:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`// .vscode/settings.json\n{\n  \"claude.autoActivate\": true,\n  \"claude.customCommands\": [\n    {\n      \"name\": \"Generate Component\",\n      \"command\": \"/component\",\n      \"scope\": \"selection\"\n    },\n    {\n      \"name\": \"Optimize Function\", \n      \"command\": \"/optimize\",\n      \"scope\": \"function\"\n    }\n  ],\n  \"claude.mcp.autoLoad\": [\"context7\", \"sequential\"],\n  \"claude.personas.default\": \"architect\"\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Complementary Extensions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Essential extensions for Claude Code workflow:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`{\n  \"recommendations\": [\n    \"anthropic.claude-code\",           // Core Claude integration\n    \"ms-python.python\",               // Python support\n    \"bradlc.vscode-tailwindcss\",      // Tailwind intellisense\n    \"ms-vscode.vscode-typescript-next\", // TypeScript support\n    \"esbenp.prettier-vscode\",         // Code formatting\n    \"ms-playwright.playwright\",       // Testing integration\n    \"github.copilot\",                 // AI pair programming\n    \"gruntfuggly.todo-tree\"          // TODO management\n  ]\n}\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Custom VSCode Commands\"}),`\n`,(0,n.jsx)(e.p,{children:\"Create project-specific commands:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-json\",children:`// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Claude: Generate Tests\",\n      \"type\": \"shell\", \n      \"command\": \"claude\",\n      \"args\": [\"/test\", \"\\${relativeFile}\"],\n      \"group\": \"build\"\n    },\n    {\n      \"label\": \"Claude: Optimize Performance\",\n      \"type\": \"shell\",\n      \"command\": \"claude\", \n      \"args\": [\"/optimize\", \"--focus\", \"performance\"],\n      \"group\": \"build\"\n    }\n  ]\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Practical Examples and Use Cases\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Example 1: React Component Factory\"}),`\n`,(0,n.jsx)(e.h4,{children:\"/component [name] [type?]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Creates a complete React component with:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"TypeScript interfaces\"}),`\n`,(0,n.jsx)(e.li,{children:\"Styled with design system\"}),`\n`,(0,n.jsx)(e.li,{children:\"Unit tests with React Testing Library\"}),`\n`,(0,n.jsx)(e.li,{children:\"Storybook stories\"}),`\n`,(0,n.jsx)(e.li,{children:\"Documentation\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Usage\"}),\": \",(0,n.jsx)(e.code,{children:\"/component UserCard --type data-display\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Generated Structure\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`src/components/UserCard/\n\\u251C\\u2500\\u2500 index.ts # Barrel export\n\\u251C\\u2500\\u2500 UserCard.tsx # Main component\n\\u251C\\u2500\\u2500 UserCard.test.tsx # Unit tests\n\\u251C\\u2500\\u2500 UserCard.stories.tsx # Storybook\n\\u251C\\u2500\\u2500 UserCard.module.css # Styles\n\\u2514\\u2500\\u2500 types.ts # TypeScript interfaces\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Example 2: API Endpoint Generator\"}),`\n`,(0,n.jsx)(e.h4,{children:\"/api [method] [path]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Generates complete API endpoint with:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Input validation (Zod schemas)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Database operations (Prisma/Drizzle)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Error handling middleware\"}),`\n`,(0,n.jsx)(e.li,{children:\"OpenAPI documentation\"}),`\n`,(0,n.jsx)(e.li,{children:\"Integration tests\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Usage\"}),\": \",(0,n.jsx)(e.code,{children:\"/api POST /users\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Generated Files\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"src/api/users/route.ts\"}),\" - Route handler\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"src/lib/validation/users.ts\"}),\" - Zod schemas\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"src/types/api/users.ts\"}),\" - TypeScript types\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"tests/api/users.test.ts\"}),\" - Integration tests\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"docs/api/users.md\"}),\" - Documentation\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Example 3: Performance Optimization Workflow\"}),`\n`,(0,n.jsx)(e.h4,{children:\"/optimize [target] [--metrics]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Comprehensive performance optimization:\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Usage\"}),\": \",(0,n.jsx)(e.code,{children:\"/optimize bundle --metrics lighthouse\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Workflow\"}),\":\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Analyze current performance metrics\"}),`\n`,(0,n.jsx)(e.li,{children:\"Identify bottlenecks and opportunities\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Implement optimizations:\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Code splitting\"}),`\n`,(0,n.jsx)(e.li,{children:\"Tree shaking\"}),`\n`,(0,n.jsx)(e.li,{children:\"Image optimization\"}),`\n`,(0,n.jsx)(e.li,{children:\"Caching strategies\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.li,{children:\"Validate improvements\"}),`\n`,(0,n.jsx)(e.li,{children:\"Generate performance report\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\n## Repository Resources and Tools\n### Essential Repositories\n- **SuperClaude Framework**\n  - SuperClaude Core - Main framework\n  - SuperClaude Templates - Project templates\n  - SuperClaude Personas - AI behavior patterns\n- **MCP Tools Collection**\n  - Context7 MCP - Documentation lookup\n  - Sequential MCP - Complex analysis\n  - Magic MCP - UI generation\n  - Playwright MCP - Testing automation\n- **Community Tools**\n  - Claude Code Utils - Utility functions\n  - Claude Workflows - Workflow examples\n  - Claude Plugins - Plugin registry\n\n### Configuration Templates\n- **Starter Templates:**\n  - React + TypeScript + Tailwind\n    - \\`git clone https://github.com/superclaude/templates/react-ts-tailwind\\`\n  - Next.js Full-Stack  \n    - \\`git clone https://github.com/superclaude/templates/nextjs-fullstack\\`\n  - Node.js API\n    - \\`git clone https://github.com/superclaude/templates/nodejs-api\\`\n  - Python FastAPI\n    - \\`git clone https://github.com/superclaude/templates/python-fastapi\\`\n\n## Best Practices and Advanced Configurations\n### Performance Optimization\n#### Token Management:\n\n\\`\\`\\`yaml\n## Efficiency Settings\n--uc                    # Ultra-compressed mode (30-50% token reduction)\n--answer-only          # Skip workflow automation\n--delegate auto        # Intelligent task distribution\n--concurrency 5        # Parallel processing\n`})}),`\n`,(0,n.jsx)(e.h4,{children:\"Caching Strategies:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`## Caching Configuration\nmcp_cache:\n  enabled: true\n  ttl: 3600             # 1 hour cache\n  max_size: 100MB\n \ncontext_cache:\n  project_analysis: 24h\n  dependency_lookup: 1h\n  documentation: 7d\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Security Considerations\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Safe Practices:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Never include API keys in CLAUDE.md\"}),`\n`,(0,n.jsx)(e.li,{children:\"Use environment variables for secrets\"}),`\n`,(0,n.jsx)(e.li,{children:\"Validate all generated code\"}),`\n`,(0,n.jsx)(e.li,{children:\"Review MCP tool permissions\"}),`\n`,(0,n.jsx)(e.li,{children:\"Audit custom commands regularly\"}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Recommended .gitignore additions\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`.claude/secrets/\n.claude/cache/\n.claude/logs/\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"Team Collaboration\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Shared Configurations:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Commit shared CLAUDE.md to repository\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Document custom commands in \",(0,n.jsx)(e.code,{children:\"docs/claude-commands.md\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Share MCP tool configurations in \",(0,n.jsx)(e.code,{children:\".claude/team-config.yml\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Troubleshooting Common Issues\"}),`\n`,(0,n.jsx)(e.h4,{children:\"Performance Issues:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Check MCP server status: \",(0,n.jsx)(e.code,{children:\"claude mcp status\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Clear caches: \",(0,n.jsx)(e.code,{children:\"claude cache clear\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Reduce token usage: \",(0,n.jsx)(e.code,{children:\"claude config --compression-mode aggressive\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{children:\"Configuration Conflicts:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Validate CLAUDE.md syntax: \",(0,n.jsx)(e.code,{children:\"claude validate .\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Test custom commands: \",(0,n.jsx)(e.code,{children:\"claude test-command /component TestComponent\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Debug MCP connections: \",(0,n.jsx)(e.code,{children:\"claude mcp debug --server context7\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Future Directions and Advanced Patterns\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Emerging Patterns\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"AI-Driven Development Workflows\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Intelligent code review automation\"}),`\n`,(0,n.jsx)(e.li,{children:\"Predictive bug detection\"}),`\n`,(0,n.jsx)(e.li,{children:\"Automated dependency updates\"}),`\n`,(0,n.jsx)(e.li,{children:\"Context-aware documentation generation\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Integration Possibilities\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"GitHub Actions integration\"}),`\n`,(0,n.jsx)(e.li,{children:\"CI/CD pipeline automation\"}),`\n`,(0,n.jsx)(e.li,{children:\"Monitoring and alerting systems\"}),`\n`,(0,n.jsx)(e.li,{children:\"Code quality metric tracking\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Community Contributions\",`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Create MCP Tools: Develop specialized tools for your domain\"}),`\n`,(0,n.jsx)(e.li,{children:\"Share Templates: Contribute project templates and configurations\"}),`\n`,(0,n.jsx)(e.li,{children:\"Document Patterns: Share successful customization patterns\"}),`\n`,(0,n.jsx)(e.li,{children:\"Build Integrations: Create integrations with popular tools\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Claude Code customization transforms a powerful AI coding assistant into a personalized development ecosystem. From simple CLAUDE.md instructions to sophisticated SuperClaude frameworks, the customization options are virtually limitless.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Start with basic project instructions, experiment with custom commands, integrate MCP tools for specialized functionality, and gradually build toward advanced automation patterns. The key is iterative improvement\\u2014each customization should solve a real problem and improve your development workflow.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Claude Code ecosystem is rapidly evolving, with new tools, frameworks, and patterns emerging regularly. Stay engaged with the community, contribute your innovations, and help shape the future of AI-assisted development.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Remember: the best customizations are those that seamlessly integrate into your existing workflow while amplifying your productivity and code quality. Start simple, iterate often, and let your unique development needs guide your customization journey.\"})]})}function m(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return w(x);})();\n;return Component;"
    },
    "_id": "blog/a-deep-dive-into-claude-code-customization.mdx",
    "_raw": {
      "sourceFilePath": "blog/a-deep-dive-into-claude-code-customization.mdx",
      "sourceFileName": "a-deep-dive-into-claude-code-customization.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/a-deep-dive-into-claude-code-customization"
    },
    "type": "Post",
    "readingTime": {
      "text": "10 min read",
      "minutes": 9.005,
      "time": 540300,
      "words": 1801
    },
    "slug": "a-deep-dive-into-claude-code-customization",
    "path": "blog/a-deep-dive-into-claude-code-customization",
    "filePath": "blog/a-deep-dive-into-claude-code-customization.mdx"
  },
  {
    "title": "AI‑Assisted Dev Platforms That Actually Ship (And the Ones That Don’t)",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Reviewing Cursor, Windsurf, v0, 21st.dev, Copilot, and Claude Code—clear wins, painful misses, and honest recommendations.",
    "tags": [
      "Reviews",
      "AI Tools",
      "Productivity"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n## What shipped for me\n- Cursor: refactor assistance on medium repos\n- Claude Code: multi-file diffs, architecture planning\n- Copilot: inline speed boosts in TS/React\n\n## What didn’t\n- Agents that “own” the terminal without tests\n- Auto-generated CRUD without auth/validation\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var x=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),A=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},l=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!C.call(t,s)&&s!==i&&o(t,s,{get:()=>e[s],enumerable:!(r=m(e,s))||r.enumerable});return t};var g=(t,e,i)=>(i=t!=null?u(p(t)):{},l(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),v=t=>l(o({},\"__esModule\",{value:!0}),t);var d=x((D,a)=>{a.exports=_jsx_runtime});var _={};A(_,{default:()=>c,frontmatter:()=>w});var n=g(d()),w={title:\"AI\\u2011Assisted Dev Platforms That Actually Ship (And the Ones That Don\\u2019t)\",publishedAt:\"2025-08-08\",summary:\"Reviewing Cursor, Windsurf, v0, 21st.dev, Copilot, and Claude Code\\u2014clear wins, painful misses, and honest recommendations.\",tags:[\"Reviews\",\"AI Tools\",\"Productivity\"],featured:!1};function h(t){let e={h2:\"h2\",li:\"li\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"What shipped for me\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Cursor: refactor assistance on medium repos\"}),`\n`,(0,n.jsx)(e.li,{children:\"Claude Code: multi-file diffs, architecture planning\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot: inline speed boosts in TS/React\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"What didn\\u2019t\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Agents that \\u201Cown\\u201D the terminal without tests\"}),`\n`,(0,n.jsx)(e.li,{children:\"Auto-generated CRUD without auth/validation\"}),`\n`]})]})}function c(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return v(_);})();\n;return Component;"
    },
    "_id": "blog/ai-assisted-dev-platforms-which-actually-ship.mdx",
    "_raw": {
      "sourceFilePath": "blog/ai-assisted-dev-platforms-which-actually-ship.mdx",
      "sourceFileName": "ai-assisted-dev-platforms-which-actually-ship.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/ai-assisted-dev-platforms-which-actually-ship"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.21,
      "time": 12600,
      "words": 42
    },
    "slug": "ai-assisted-dev-platforms-which-actually-ship",
    "path": "blog/ai-assisted-dev-platforms-which-actually-ship",
    "filePath": "blog/ai-assisted-dev-platforms-which-actually-ship.mdx"
  },
  {
    "title": "AI Dev Platforms: A Brutally Honest Roundup (21st.dev, Vercel v0, Copilot, Claude Code, more)",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "I used the big AI dev tools for real work. Here’s where they shine, where they stumble, and which I’d actually pay for.",
    "tags": [
      "Reviews",
      "AI Tools",
      "Developer Experience"
    ],
    "draft": false,
    "featured": true,
    "body": {
      "raw": "\nShort version: there’s no autopilot. But there are real accelerants—if you use them where they’re strong and never hand them the keys to your repo. I tested the current wave of AI dev platforms on a real app and kept them in rotation for a month. This is the report I’d give a team choosing what to adopt.\n\n## Methodology (so we’re comparing apples)\n\nProject: a Next.js 14 app with Postgres (Prisma), Auth.js, Stripe webhooks, and a handful of API routes. The tasks I asked tools to help with:\n\n1) Scaffold components that match an existing design system (CVA + Tailwind)\n2) Add a feature end‑to‑end (new API, form, validation, tests)\n3) Migrate a small module (switch state management lib)\n4) Performance sweep (code split, image fixes, guard SSR)\n5) Write unit tests for non‑trivial logic\n\nI graded on accuracy, code quality, speed, recovery from confusion, and how much cleanup I had to do.\n\n## Scorecard (out of 10)\n\n- Claude Code: 9 — best at multi‑file context, safest diffs, real plans\n- GitHub Copilot: 8 — fast inline completion, great “fill‑in‑the‑middle”\n- Cursor: 7 — pleasant agent UX, gets jumpy on large refactors\n- 21st.dev: 7 — impressive prompts‑to‑repo, opinionated rails\n- Vercel v0: 6 — flashy UI scaffolds, struggles on data flows and auth\n\nWhy Claude wins: it talks in plans and diffs instead of “trust me.” It’s the most comfortable at refactors that span multiple files, and it asks for confirmation at the right times.\n\n## Tool by tool: where they shine\n\n### Claude Code\n\nUse it for: multi‑file changes, scaffolds with tests, migrations with a plan, performance passes.\n\nIt excels at: seeing your codebase as a system and proposing steps. If you give it types, it respects them. If you set quality gates, it will try to hit them.\n\nWeaknesses: it can over‑explain when you just want a one‑liner; be specific with prompts. For very niche library APIs, it benefits from a docs MCP.\n\n### GitHub Copilot\n\nUse it for: speed boosts while typing; templatey code; repetitive transforms.\n\nIt excels at: in‑line “I know what you mean” completion when the surrounding context is clear. Good at TypeScript ergonomics.\n\nWeaknesses: it doesn’t know your project intent; it’ll happily hallucinate a function that looks right but doesn’t exist.\n\n### Cursor\n\nUse it for: agent‑style chats scoped to a set of files; quick PR preparation.\n\nIt excels at: making it easy to include/exclude files and propose diffs.\n\nWeaknesses: state drifts on long sessions. Keep sessions short and commit frequently.\n\n### 21st.dev\n\nUse it for: spinning up a new repo from a high‑level spec; getting a starting point with architecture patterns baked in.\n\nIt excels at: opinionated scaffolds (auth, db, routing) that are closer to “real” than most templates.\n\nWeaknesses: opinions leak into places you may not want; unpicking can cost the time you “saved.”\n\n### Vercel v0\n\nUse it for: quick UI explorations from designs; throwaway branches to try component ideas.\n\nIt excels at: generating attractive, modern components that look good enough for a demo.\n\nWeaknesses: connecting to real data and auth flows is where the illusion breaks.\n\n## Scenarios: how they did on real tasks\n\n1) Component scaffold (Button, Modal, Table)\n\n- Claude: produced TSX + tests + stories matching CVA conventions, minimal fixups.\n- Copilot: great at filling in the cva variants once I stubbed the component.\n- v0: gorgeous UI but more CSS than I wanted; rework needed to match tokens.\n\n2) End‑to‑end feature (feedback form → API → validation → email)\n\n- Claude: proposed a plan, created a Zod schema, API route, and minimal tests.\n- Cursor: helped wire the pieces once they existed; decent with small diffs.\n- Copilot: excelled at schema → form glue in TS.\n\n3) Migration (Redux → Zustand)\n\n- Claude: produced a para‑plan, moved one slice at a time, grouped commits nicely.\n- Cursor: okay for simple slices; struggled when selectors were complex.\n\n4) Perf sweep\n\n- Claude: found and fixed obvious SSR pitfalls, added dynamic imports prudently.\n- Copilot: sped up mechanical changes once the pattern was clear.\n\n5) Unit tests for logic\n\n- Claude: can write high‑quality tests if you show the function surface and examples.\n- Copilot: quick at writing the “expected” shape once a test exists.\n\n## How these tools break (and how to keep them honest)\n\n- Uncommitted changes confuse long‑running agents. Commit or stash first.\n- Ambiguous prompts create confident nonsense. Provide types, signatures, or a failing test.\n- No tests? You’ll clean up subtle errors later. Ask for tests with the code.\n\nProcess I use:\n\n1) Write a short spec and constraints (“use Zod; keep API envelopes standard”).\n2) Ask for a plan and a commit breakdown.\n3) Let the tool implement one chunk; run tests and typecheck.\n4) Iterate, keeping diffs small. If it thrashes, reset context or start a new session.\n\n## Team adoption: what to turn on now\n\n- Claude Code for refactors, migrations, and performance PRs.\n- Copilot for in‑line acceleration across the team.\n- v0 for design‑heavy teams prototyping components (opt‑in; separate branch).\n\nGuardrails:\n\n- A CI check that fails on `TODO(` or `FIXME(` unless the PR is flagged.\n- A “tests required” rule for PRs that touch core logic.\n- A short guide of blessed prompts and commands (keep a `/docs/ai-playbook.md`).\n\n## What I’d pay for (and what I’d wait on)\n\nPay for Claude Code and Copilot if your team writes TypeScript and ships web apps. They complement each other: Claude for thinking across files, Copilot for speed in a file.\n\nWait on “full agents that manage your repo.” The UX is getting better, but they still get lost on edge cases and state drift. Until they’re hermetic (tests plus state snapshots), keep them on a leash.\n\n## Final recommendations\n\nAdopt AI tools where the benefits compound: scaffolding, migrations, tests, and perf sweeps. Keep humans in charge of architecture, boundaries, and product intuition. Demand plans, small diffs, and tests. You’ll ship faster without handing your codebase to a black box.\n",
      "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},l=(t,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(t,o)&&o!==i&&s(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var k=(t,e,i)=>(i=t!=null?p(f(t)):{},l(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),b=t=>l(s({},\"__esModule\",{value:!0}),t);var d=y((x,a)=>{a.exports=_jsx_runtime});var I={};w(I,{default:()=>h,frontmatter:()=>C});var n=k(d()),C={title:\"AI Dev Platforms: A Brutally Honest Roundup (21st.dev, Vercel v0, Copilot, Claude Code, more)\",publishedAt:\"2025-08-08\",summary:\"I used the big AI dev tools for real work. Here\\u2019s where they shine, where they stumble, and which I\\u2019d actually pay for.\",tags:[\"Reviews\",\"AI Tools\",\"Developer Experience\"],featured:!0};function c(t){let e={code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Short version: there\\u2019s no autopilot. But there are real accelerants\\u2014if you use them where they\\u2019re strong and never hand them the keys to your repo. I tested the current wave of AI dev platforms on a real app and kept them in rotation for a month. This is the report I\\u2019d give a team choosing what to adopt.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Methodology (so we\\u2019re comparing apples)\"}),`\n`,(0,n.jsx)(e.p,{children:\"Project: a Next.js 14 app with Postgres (Prisma), Auth.js, Stripe webhooks, and a handful of API routes. The tasks I asked tools to help with:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Scaffold components that match an existing design system (CVA + Tailwind)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add a feature end\\u2011to\\u2011end (new API, form, validation, tests)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Migrate a small module (switch state management lib)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Performance sweep (code split, image fixes, guard SSR)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Write unit tests for non\\u2011trivial logic\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"I graded on accuracy, code quality, speed, recovery from confusion, and how much cleanup I had to do.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Scorecard (out of 10)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude Code: 9 \\u2014 best at multi\\u2011file context, safest diffs, real plans\"}),`\n`,(0,n.jsx)(e.li,{children:\"GitHub Copilot: 8 \\u2014 fast inline completion, great \\u201Cfill\\u2011in\\u2011the\\u2011middle\\u201D\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cursor: 7 \\u2014 pleasant agent UX, gets jumpy on large refactors\"}),`\n`,(0,n.jsx)(e.li,{children:\"21st.dev: 7 \\u2014 impressive prompts\\u2011to\\u2011repo, opinionated rails\"}),`\n`,(0,n.jsx)(e.li,{children:\"Vercel v0: 6 \\u2014 flashy UI scaffolds, struggles on data flows and auth\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Why Claude wins: it talks in plans and diffs instead of \\u201Ctrust me.\\u201D It\\u2019s the most comfortable at refactors that span multiple files, and it asks for confirmation at the right times.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Tool by tool: where they shine\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Claude Code\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use it for: multi\\u2011file changes, scaffolds with tests, migrations with a plan, performance passes.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It excels at: seeing your codebase as a system and proposing steps. If you give it types, it respects them. If you set quality gates, it will try to hit them.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Weaknesses: it can over\\u2011explain when you just want a one\\u2011liner; be specific with prompts. For very niche library APIs, it benefits from a docs MCP.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"GitHub Copilot\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use it for: speed boosts while typing; templatey code; repetitive transforms.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It excels at: in\\u2011line \\u201CI know what you mean\\u201D completion when the surrounding context is clear. Good at TypeScript ergonomics.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Weaknesses: it doesn\\u2019t know your project intent; it\\u2019ll happily hallucinate a function that looks right but doesn\\u2019t exist.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Cursor\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use it for: agent\\u2011style chats scoped to a set of files; quick PR preparation.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It excels at: making it easy to include/exclude files and propose diffs.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Weaknesses: state drifts on long sessions. Keep sessions short and commit frequently.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"21st.dev\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use it for: spinning up a new repo from a high\\u2011level spec; getting a starting point with architecture patterns baked in.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It excels at: opinionated scaffolds (auth, db, routing) that are closer to \\u201Creal\\u201D than most templates.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Weaknesses: opinions leak into places you may not want; unpicking can cost the time you \\u201Csaved.\\u201D\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Vercel v0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Use it for: quick UI explorations from designs; throwaway branches to try component ideas.\"}),`\n`,(0,n.jsx)(e.p,{children:\"It excels at: generating attractive, modern components that look good enough for a demo.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Weaknesses: connecting to real data and auth flows is where the illusion breaks.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Scenarios: how they did on real tasks\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Component scaffold (Button, Modal, Table)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude: produced TSX + tests + stories matching CVA conventions, minimal fixups.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot: great at filling in the cva variants once I stubbed the component.\"}),`\n`,(0,n.jsx)(e.li,{children:\"v0: gorgeous UI but more CSS than I wanted; rework needed to match tokens.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsx)(e.li,{children:\"End\\u2011to\\u2011end feature (feedback form \\u2192 API \\u2192 validation \\u2192 email)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude: proposed a plan, created a Zod schema, API route, and minimal tests.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cursor: helped wire the pieces once they existed; decent with small diffs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot: excelled at schema \\u2192 form glue in TS.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Migration (Redux \\u2192 Zustand)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude: produced a para\\u2011plan, moved one slice at a time, grouped commits nicely.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cursor: okay for simple slices; struggled when selectors were complex.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Perf sweep\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude: found and fixed obvious SSR pitfalls, added dynamic imports prudently.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot: sped up mechanical changes once the pattern was clear.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Unit tests for logic\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude: can write high\\u2011quality tests if you show the function surface and examples.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot: quick at writing the \\u201Cexpected\\u201D shape once a test exists.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"How these tools break (and how to keep them honest)\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Uncommitted changes confuse long\\u2011running agents. Commit or stash first.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Ambiguous prompts create confident nonsense. Provide types, signatures, or a failing test.\"}),`\n`,(0,n.jsx)(e.li,{children:\"No tests? You\\u2019ll clean up subtle errors later. Ask for tests with the code.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Process I use:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Write a short spec and constraints (\\u201Cuse Zod; keep API envelopes standard\\u201D).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Ask for a plan and a commit breakdown.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Let the tool implement one chunk; run tests and typecheck.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Iterate, keeping diffs small. If it thrashes, reset context or start a new session.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Team adoption: what to turn on now\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Claude Code for refactors, migrations, and performance PRs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Copilot for in\\u2011line acceleration across the team.\"}),`\n`,(0,n.jsx)(e.li,{children:\"v0 for design\\u2011heavy teams prototyping components (opt\\u2011in; separate branch).\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Guardrails:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A CI check that fails on \",(0,n.jsx)(e.code,{children:\"TODO(\"}),\" or \",(0,n.jsx)(e.code,{children:\"FIXME(\"}),\" unless the PR is flagged.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"A \\u201Ctests required\\u201D rule for PRs that touch core logic.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"A short guide of blessed prompts and commands (keep a \",(0,n.jsx)(e.code,{children:\"/docs/ai-playbook.md\"}),\").\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"What I\\u2019d pay for (and what I\\u2019d wait on)\"}),`\n`,(0,n.jsx)(e.p,{children:\"Pay for Claude Code and Copilot if your team writes TypeScript and ships web apps. They complement each other: Claude for thinking across files, Copilot for speed in a file.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Wait on \\u201Cfull agents that manage your repo.\\u201D The UX is getting better, but they still get lost on edge cases and state drift. Until they\\u2019re hermetic (tests plus state snapshots), keep them on a leash.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Final recommendations\"}),`\n`,(0,n.jsx)(e.p,{children:\"Adopt AI tools where the benefits compound: scaffolding, migrations, tests, and perf sweeps. Keep humans in charge of architecture, boundaries, and product intuition. Demand plans, small diffs, and tests. You\\u2019ll ship faster without handing your codebase to a black box.\"})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}return b(I);})();\n;return Component;"
    },
    "_id": "blog/ai-dev-platforms-brutally-honest-roundup.mdx",
    "_raw": {
      "sourceFilePath": "blog/ai-dev-platforms-brutally-honest-roundup.mdx",
      "sourceFileName": "ai-dev-platforms-brutally-honest-roundup.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/ai-dev-platforms-brutally-honest-roundup"
    },
    "type": "Post",
    "readingTime": {
      "text": "6 min read",
      "minutes": 5.015,
      "time": 300900,
      "words": 1003
    },
    "slug": "ai-dev-platforms-brutally-honest-roundup",
    "path": "blog/ai-dev-platforms-brutally-honest-roundup",
    "filePath": "blog/ai-dev-platforms-brutally-honest-roundup.mdx"
  },
  {
    "title": "Building Modern Web Applications with Next.js and TypeScript",
    "publishedAt": "2024-01-15T00:00:00.000Z",
    "summary": "A comprehensive guide to building scalable web applications using Next.js 14, TypeScript, and modern development practices.",
    "tags": [
      "nextjs",
      "typescript",
      "web-development",
      "tutorial"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n# Building Modern Web Applications with Next.js and TypeScript\n\nNext.js has revolutionized the way we build React applications, offering powerful features like server-side rendering, static site generation, and the new App Router. Combined with TypeScript, it provides an excellent foundation for building scalable, maintainable web applications.\n\n## Why Next.js + TypeScript?\n\n### Type Safety\nTypeScript brings compile-time type checking, catching errors before they reach production:\n\n```typescript\ninterface User {\n  id: string\n  name: string\n  email: string\n  role: 'admin' | 'user'\n}\n\nconst getUser = async (id: string): Promise<User> => {\n  const response = await fetch(`/api/users/${id}`)\n  return response.json()\n}\n```\n\n### Server Components\nNext.js 14's App Router introduces React Server Components, enabling better performance:\n\n```typescript\n// This component runs on the server\nasync function BlogPost({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n  \n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.content }} />\n    </article>\n  )\n}\n```\n\n## Key Features to Leverage\n\n1. **File-based Routing**: Organize your pages intuitively\n2. **API Routes**: Build your backend alongside your frontend\n3. **Image Optimization**: Automatic image optimization and loading\n4. **Built-in CSS Support**: Sass, CSS Modules, and CSS-in-JS out of the box\n\n## Best Practices\n\n### Project Structure\n```\nsrc/\n├── app/\n│   ├── (routes)/\n│   ├── api/\n│   └── globals.css\n├── components/\n│   ├── ui/\n│   └── forms/\n├── lib/\n│   ├── utils.ts\n│   └── types.ts\n└── data/\n    └── constants.ts\n```\n\n### Error Handling\nAlways implement proper error boundaries and loading states:\n\n```typescript\nexport default function Loading() {\n  return <div>Loading...</div>\n}\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={reset}>Try again</button>\n    </div>\n  )\n}\n```\n\n## Conclusion\n\nNext.js 14 with TypeScript provides a solid foundation for modern web applications. The combination of type safety, server components, and excellent developer experience makes it an ideal choice for projects of any scale.\n\nStart your next project with this stack, and you'll be building faster, more reliable applications in no time!",
      "code": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),b=(t,n)=>{for(var r in n)o(t,r,{get:n[r],enumerable:!0})},a=(t,n,r,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of g(n))!y.call(t,i)&&i!==r&&o(t,i,{get:()=>n[i],enumerable:!(s=u(n,i))||s.enumerable});return t};var x=(t,n,r)=>(r=t!=null?h(m(t)):{},a(n||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),S=t=>a(o({},\"__esModule\",{value:!0}),t);var l=f((T,c)=>{c.exports=_jsx_runtime});var w={};b(w,{default:()=>p,frontmatter:()=>v});var e=x(l()),v={title:\"Building Modern Web Applications with Next.js and TypeScript\",publishedAt:\"2024-01-15\",summary:\"A comprehensive guide to building scalable web applications using Next.js 14, TypeScript, and modern development practices.\",tags:[\"nextjs\",\"typescript\",\"web-development\",\"tutorial\"],featured:!1};function d(t){let n={code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",strong:\"strong\",...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{children:\"Building Modern Web Applications with Next.js and TypeScript\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next.js has revolutionized the way we build React applications, offering powerful features like server-side rendering, static site generation, and the new App Router. Combined with TypeScript, it provides an excellent foundation for building scalable, maintainable web applications.\"}),`\n`,(0,e.jsx)(n.h2,{children:\"Why Next.js + TypeScript?\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Type Safety\"}),`\n`,(0,e.jsx)(n.p,{children:\"TypeScript brings compile-time type checking, catching errors before they reach production:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`interface User {\n  id: string\n  name: string\n  email: string\n  role: 'admin' | 'user'\n}\n\nconst getUser = async (id: string): Promise<User> => {\n  const response = await fetch(\\`/api/users/\\${id}\\`)\n  return response.json()\n}\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Server Components\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next.js 14's App Router introduces React Server Components, enabling better performance:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`// This component runs on the server\nasync function BlogPost({ params }: { params: { slug: string } }) {\n  const post = await getPost(params.slug)\n  \n  return (\n    <article>\n      <h1>{post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: post.content }} />\n    </article>\n  )\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Key Features to Leverage\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"File-based Routing\"}),\": Organize your pages intuitively\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"API Routes\"}),\": Build your backend alongside your frontend\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Image Optimization\"}),\": Automatic image optimization and loading\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.strong,{children:\"Built-in CSS Support\"}),\": Sass, CSS Modules, and CSS-in-JS out of the box\"]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{children:\"Best Practices\"}),`\n`,(0,e.jsx)(n.h3,{children:\"Project Structure\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`src/\n\\u251C\\u2500\\u2500 app/\n\\u2502   \\u251C\\u2500\\u2500 (routes)/\n\\u2502   \\u251C\\u2500\\u2500 api/\n\\u2502   \\u2514\\u2500\\u2500 globals.css\n\\u251C\\u2500\\u2500 components/\n\\u2502   \\u251C\\u2500\\u2500 ui/\n\\u2502   \\u2514\\u2500\\u2500 forms/\n\\u251C\\u2500\\u2500 lib/\n\\u2502   \\u251C\\u2500\\u2500 utils.ts\n\\u2502   \\u2514\\u2500\\u2500 types.ts\n\\u2514\\u2500\\u2500 data/\n    \\u2514\\u2500\\u2500 constants.ts\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Error Handling\"}),`\n`,(0,e.jsx)(n.p,{children:\"Always implement proper error boundaries and loading states:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`export default function Loading() {\n  return <div>Loading...</div>\n}\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={reset}>Try again</button>\n    </div>\n  )\n}\n`})}),`\n`,(0,e.jsx)(n.h2,{children:\"Conclusion\"}),`\n`,(0,e.jsx)(n.p,{children:\"Next.js 14 with TypeScript provides a solid foundation for modern web applications. The combination of type safety, server components, and excellent developer experience makes it an ideal choice for projects of any scale.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Start your next project with this stack, and you'll be building faster, more reliable applications in no time!\"})]})}function p(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(d,{...t})}):d(t)}return S(w);})();\n;return Component;"
    },
    "_id": "blog/building-modern-web-apps.mdx",
    "_raw": {
      "sourceFilePath": "blog/building-modern-web-apps.mdx",
      "sourceFileName": "building-modern-web-apps.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/building-modern-web-apps"
    },
    "type": "Post",
    "readingTime": {
      "text": "2 min read",
      "minutes": 1.68,
      "time": 100800,
      "words": 336
    },
    "slug": "building-modern-web-apps",
    "path": "blog/building-modern-web-apps",
    "filePath": "blog/building-modern-web-apps.mdx"
  },
  {
    "title": "Claude Code + SuperClaude: Workflows That Actually Save Time",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "The Claude workflows I run daily—scaffolds, migrations, and performance audits—with real configs you can copy.",
    "tags": [
      "Claude Code",
      "SuperClaude",
      "Workflows",
      "Productivity"
    ],
    "draft": false,
    "featured": true,
    "body": {
      "raw": "\nI don’t ask Claude to “build the app.” I ask it to do the high‑leverage, low‑joy work so I can keep my head in the architecture: scaffolding, migrations, refactors, performance hunts, and safety checks. SuperClaude turns those into repeatable workflows you can run and re‑run without fear.\n\nThis is the playbook I actually use—commands, configs, and the guardrails that save hours without creating a black box.\n\n## The philosophy: fewer keystrokes, more certainty\n\nGood AI workflows shouldn’t surprise your teammates or break CI. The litmus test:\n\n- Re‑runnable: If you run the command twice, the second run should be a no‑op.\n- Diffable: Every change is visible in a PR; no hidden state.\n- Test‑aware: Where risk is high, tests appear with the code.\n- Convention‑first: Output matches your existing patterns (naming, lint, types).\n\nSuperClaude encodes those expectations with personas, quality gates, and wave orchestration.\n\n## My SuperClaude base config\n\n```yaml\n# ~/.claude/superclaude/config.yml\npersonas:\n  default: architect\n  frontend: frontend\n  backend: backend\n\nquality_gates:\n  typescript_check: true\n  lint_validation: true\n  test_coverage: 75\n  forbid_todo: true\n\nwave_orchestration:\n  auto_delegation: true\n  complexity_threshold: 0.6\n  max_concurrent: 5\n  commit_granularity: feature\n\nconventions:\n  component_style: tailwind\n  test_runner: vitest\n  e2e: playwright\n  api_validation: zod\n  env_management: dotenv\n```\n\nThis tells SuperClaude how “opinionated” to be. The higher the quality gates, the more often the agent will pause and ask for confirmation or produce tests.\n\n## Workflow 1: Component scaffolds you won’t have to re‑do\n\nSlash command:\n\n```\n/component Button --style tailwind --tests --a11y\n```\n\nWhat it does (and why it saves time):\n\n1) Creates `src/components/Button/Button.tsx` with typed props and variants.\n2) Generates `Button.test.tsx` (RTL + happy/error states) and `Button.stories.tsx`.\n3) Emits `index.ts` barrel, updates central `src/components/index.ts` if you have one.\n4) Lints, typechecks, and runs tests before offering the diff.\n\nExample output (trimmed to key parts):\n\n```tsx\n// src/components/Button/Button.tsx\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\n\nconst button = cva('inline-flex items-center rounded-md font-medium focus:outline-none focus:ring-2', {\n  variants: {\n    variant: {\n      primary: 'bg-blue-600 text-white hover:bg-blue-700',\n      ghost: 'bg-transparent text-gray-900 hover:bg-gray-100 dark:text-gray-100 dark:hover:bg-gray-800',\n    },\n    size: {\n      sm: 'px-2.5 py-1.5 text-sm',\n      md: 'px-3 py-2 text-sm',\n      lg: 'px-4 py-2.5 text-base',\n    },\n  },\n  defaultVariants: { variant: 'primary', size: 'md' },\n})\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof button> {}\nexport function Button({ className, variant, size, ...props }: ButtonProps) {\n  return <button className={cn(button({ variant, size }), className)} {...props} />\n}\n```\n\nPitfalls avoided:\n\n- It won’t create duplicate exports; it checks existing indices.\n- It matches your ESLint/Prettier configs.\n- It uses your `cn`/CVA stack if present; otherwise, it falls back cleanly.\n\n## Workflow 2: State management migration without the big‑bang rewrite\n\nCommand:\n\n```\n/migrate redux zustand --slices auth,cart,ui --keep-actions --pr\n```\n\nThe migration plan the agent generates (and executes if approved):\n\n1) Inventory: where Redux is imported, slice shapes, thunk usage, selectors.\n2) Adapter layer: create Zustand stores that mirror slice state and actions.\n3) Incremental switch: component by component, replace `useSelector` with store hooks.\n4) Tests: Snapshot a few critical selectors; ensure behavior parity.\n5) Cleanup: remove unused reducers/middleware, strip Redux devtools.\n\nExample adapter snippet:\n\n```ts\n// src/store/auth.ts\nimport { create } from 'zustand'\n\ntype State = { user: { id: string; email: string } | null; token?: string }\ntype Actions = { login: (user: State['user'], token?: string) => void; logout: () => void }\n\nexport const useAuth = create<State & Actions>((set) => ({\n  user: null,\n  login: (user, token) => set({ user, token }),\n  logout: () => set({ user: null, token: undefined }),\n}))\n```\n\nSafety rails:\n\n- The agent groups commits per slice so you can revert in isolation.\n- It inserts TODO comments only behind a `--allow-todo` flag; otherwise, it files issues.\n- It leaves the Redux store in place until the last consumer moves.\n\n## Workflow 3: Performance audits that land as green PRs\n\nCommand:\n\n```\n/optimize bundle --metrics lighthouse --target LCP,TBT\n```\n\nWhat you get:\n\n- A baseline Lighthouse report committed to `docs/perf/DATE.md`.\n- An optimization plan ranked by ROI (code split routes X/Y, convert unoptimized images A/B, lazy‑load charts).\n- A PR with atomic commits and a follow‑up report re‑run showing deltas.\n\nRepresentative change:\n\n```tsx\n// Before: dashboard imports the heavy chart lib at module scope\nimport Chart from 'super-charts'\n\n// After: lazy import with SSR guard\nconst Chart = dynamic(() => import('super-charts'), { ssr: false, loading: () => <Spinner /> })\n```\n\nGuardrails:\n\n- It won’t ship `ssr: false` on pages that render above the fold without a placeholder.\n- It refuses to inline large images; it switches to `next/image` or a CDN URL.\n\n## Wave orchestration: getting the order right\n\n“Waves” are staged passes: analyze → plan → refactor → validate. For complex changes, the tool proposes waves and pauses between them.\n\nExample for a design‑system adoption:\n\n1) Inventory usage of Tailwind utilities and bespoke CSS modules.\n2) Introduce primitives (Button, Input, Card) with CVA and tokens.\n3) Replace instances in low‑risk pages; run visual tests.\n4) Roll through critical flows; measure regressions.\n\nThe orchestration prevents giant diffs that are hard to review and even harder to roll back.\n\n## Personas: targeted competence on demand\n\n- Architect: cares about boundaries, types, and interfaces.\n- Frontend: optimizes a11y, focus rings, keyboard traps.\n- Backend: trims allocations, standardizes error envelopes, adds Zod validation.\n- Performance: chases LCP/INP; caches right, not just hard.\n\nSelect with flags or set per‑project defaults in the config.\n\n## MCP integration: tools, not magic\n\nThe agent is strongest when it can look things up and run checks. Useful servers:\n\n- Context7 for docs lookup (framework APIs)\n- Sequential for deep analysis\n- Playwright for smoke testing\n\nHook them in your Claude config and they’ll light up for relevant commands.\n\n## Keeping humans in the loop\n\n- Always request a plan before execution on wide‑ranging changes.\n- Ask for a commit breakdown ahead of time; review sequence matters.\n- Expect the agent to write tests when it modifies behavior. If it can’t, it should file an issue with a failing reproduction you can complete.\n\n## Common pitfalls and how to avoid them\n\n- Letting unstaged changes confuse the agent: commit or stash before large runs.\n- Accepting API schema guesses: provide types or a schema file; the agent will respect them.\n- Allowing hidden TODOs to creep in: fail builds on `TODO(` unless a flag explicitly allows.\n\n## A practical checklist\n\n- [ ] Base config with personas, gates, and conventions checked into the repo\n- [ ] Slash commands `/component`, `/migrate`, `/optimize` (documented for the team)\n- [ ] CI jobs for typecheck, lint, unit, and a quick e2e smoke\n- [ ] Playwright smoke script for top 3 flows\n- [ ] A “no hidden TODOs” rule or bot\n\n## Conclusion\n\nSuperClaude + Claude Code shines when you treat it like power tooling, not an autopilot. Keep changes reviewable, tests close to code, and conventions explicit. Start with scaffolds, add migrations, then tackle performance. Over time you’ll build a personal automation layer that feels like you—but faster and more consistent on the work you used to dread.\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(a=p(e,r))||a.enumerable});return t};var v=(t,e,i)=>(i=t!=null?u(g(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>s(o({},\"__esModule\",{value:!0}),t);var c=y((I,l)=>{l.exports=_jsx_runtime});var x={};w(x,{default:()=>h,frontmatter:()=>b});var n=v(c()),b={title:\"Claude Code + SuperClaude: Workflows That Actually Save Time\",publishedAt:\"2025-08-08\",summary:\"The Claude workflows I run daily\\u2014scaffolds, migrations, and performance audits\\u2014with real configs you can copy.\",tags:[\"Claude Code\",\"SuperClaude\",\"Workflows\",\"Productivity\"],featured:!0};function d(t){let e={code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"I don\\u2019t ask Claude to \\u201Cbuild the app.\\u201D I ask it to do the high\\u2011leverage, low\\u2011joy work so I can keep my head in the architecture: scaffolding, migrations, refactors, performance hunts, and safety checks. SuperClaude turns those into repeatable workflows you can run and re\\u2011run without fear.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is the playbook I actually use\\u2014commands, configs, and the guardrails that save hours without creating a black box.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"The philosophy: fewer keystrokes, more certainty\"}),`\n`,(0,n.jsx)(e.p,{children:\"Good AI workflows shouldn\\u2019t surprise your teammates or break CI. The litmus test:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Re\\u2011runnable: If you run the command twice, the second run should be a no\\u2011op.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Diffable: Every change is visible in a PR; no hidden state.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Test\\u2011aware: Where risk is high, tests appear with the code.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Convention\\u2011first: Output matches your existing patterns (naming, lint, types).\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"SuperClaude encodes those expectations with personas, quality gates, and wave orchestration.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"My SuperClaude base config\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`# ~/.claude/superclaude/config.yml\npersonas:\n  default: architect\n  frontend: frontend\n  backend: backend\n\nquality_gates:\n  typescript_check: true\n  lint_validation: true\n  test_coverage: 75\n  forbid_todo: true\n\nwave_orchestration:\n  auto_delegation: true\n  complexity_threshold: 0.6\n  max_concurrent: 5\n  commit_granularity: feature\n\nconventions:\n  component_style: tailwind\n  test_runner: vitest\n  e2e: playwright\n  api_validation: zod\n  env_management: dotenv\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This tells SuperClaude how \\u201Copinionated\\u201D to be. The higher the quality gates, the more often the agent will pause and ask for confirmation or produce tests.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Workflow 1: Component scaffolds you won\\u2019t have to re\\u2011do\"}),`\n`,(0,n.jsx)(e.p,{children:\"Slash command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`/component Button --style tailwind --tests --a11y\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"What it does (and why it saves time):\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Creates \",(0,n.jsx)(e.code,{children:\"src/components/Button/Button.tsx\"}),\" with typed props and variants.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Generates \",(0,n.jsx)(e.code,{children:\"Button.test.tsx\"}),\" (RTL + happy/error states) and \",(0,n.jsx)(e.code,{children:\"Button.stories.tsx\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Emits \",(0,n.jsx)(e.code,{children:\"index.ts\"}),\" barrel, updates central \",(0,n.jsx)(e.code,{children:\"src/components/index.ts\"}),\" if you have one.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Lints, typechecks, and runs tests before offering the diff.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Example output (trimmed to key parts):\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// src/components/Button/Button.tsx\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\n\nconst button = cva('inline-flex items-center rounded-md font-medium focus:outline-none focus:ring-2', {\n  variants: {\n    variant: {\n      primary: 'bg-blue-600 text-white hover:bg-blue-700',\n      ghost: 'bg-transparent text-gray-900 hover:bg-gray-100 dark:text-gray-100 dark:hover:bg-gray-800',\n    },\n    size: {\n      sm: 'px-2.5 py-1.5 text-sm',\n      md: 'px-3 py-2 text-sm',\n      lg: 'px-4 py-2.5 text-base',\n    },\n  },\n  defaultVariants: { variant: 'primary', size: 'md' },\n})\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof button> {}\nexport function Button({ className, variant, size, ...props }: ButtonProps) {\n  return <button className={cn(button({ variant, size }), className)} {...props} />\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Pitfalls avoided:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"It won\\u2019t create duplicate exports; it checks existing indices.\"}),`\n`,(0,n.jsx)(e.li,{children:\"It matches your ESLint/Prettier configs.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"It uses your \",(0,n.jsx)(e.code,{children:\"cn\"}),\"/CVA stack if present; otherwise, it falls back cleanly.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Workflow 2: State management migration without the big\\u2011bang rewrite\"}),`\n`,(0,n.jsx)(e.p,{children:\"Command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`/migrate redux zustand --slices auth,cart,ui --keep-actions --pr\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The migration plan the agent generates (and executes if approved):\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Inventory: where Redux is imported, slice shapes, thunk usage, selectors.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Adapter layer: create Zustand stores that mirror slice state and actions.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Incremental switch: component by component, replace \",(0,n.jsx)(e.code,{children:\"useSelector\"}),\" with store hooks.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Tests: Snapshot a few critical selectors; ensure behavior parity.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cleanup: remove unused reducers/middleware, strip Redux devtools.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Example adapter snippet:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// src/store/auth.ts\nimport { create } from 'zustand'\n\ntype State = { user: { id: string; email: string } | null; token?: string }\ntype Actions = { login: (user: State['user'], token?: string) => void; logout: () => void }\n\nexport const useAuth = create<State & Actions>((set) => ({\n  user: null,\n  login: (user, token) => set({ user, token }),\n  logout: () => set({ user: null, token: undefined }),\n}))\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Safety rails:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The agent groups commits per slice so you can revert in isolation.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"It inserts TODO comments only behind a \",(0,n.jsx)(e.code,{children:\"--allow-todo\"}),\" flag; otherwise, it files issues.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"It leaves the Redux store in place until the last consumer moves.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Workflow 3: Performance audits that land as green PRs\"}),`\n`,(0,n.jsx)(e.p,{children:\"Command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`/optimize bundle --metrics lighthouse --target LCP,TBT\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"What you get:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A baseline Lighthouse report committed to \",(0,n.jsx)(e.code,{children:\"docs/perf/DATE.md\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"An optimization plan ranked by ROI (code split routes X/Y, convert unoptimized images A/B, lazy\\u2011load charts).\"}),`\n`,(0,n.jsx)(e.li,{children:\"A PR with atomic commits and a follow\\u2011up report re\\u2011run showing deltas.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Representative change:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// Before: dashboard imports the heavy chart lib at module scope\nimport Chart from 'super-charts'\n\n// After: lazy import with SSR guard\nconst Chart = dynamic(() => import('super-charts'), { ssr: false, loading: () => <Spinner /> })\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Guardrails:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"It won\\u2019t ship \",(0,n.jsx)(e.code,{children:\"ssr: false\"}),\" on pages that render above the fold without a placeholder.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"It refuses to inline large images; it switches to \",(0,n.jsx)(e.code,{children:\"next/image\"}),\" or a CDN URL.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Wave orchestration: getting the order right\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u201CWaves\\u201D are staged passes: analyze \\u2192 plan \\u2192 refactor \\u2192 validate. For complex changes, the tool proposes waves and pauses between them.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Example for a design\\u2011system adoption:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Inventory usage of Tailwind utilities and bespoke CSS modules.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Introduce primitives (Button, Input, Card) with CVA and tokens.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Replace instances in low\\u2011risk pages; run visual tests.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Roll through critical flows; measure regressions.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The orchestration prevents giant diffs that are hard to review and even harder to roll back.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Personas: targeted competence on demand\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Architect: cares about boundaries, types, and interfaces.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Frontend: optimizes a11y, focus rings, keyboard traps.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Backend: trims allocations, standardizes error envelopes, adds Zod validation.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Performance: chases LCP/INP; caches right, not just hard.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Select with flags or set per\\u2011project defaults in the config.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"MCP integration: tools, not magic\"}),`\n`,(0,n.jsx)(e.p,{children:\"The agent is strongest when it can look things up and run checks. Useful servers:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Context7 for docs lookup (framework APIs)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Sequential for deep analysis\"}),`\n`,(0,n.jsx)(e.li,{children:\"Playwright for smoke testing\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Hook them in your Claude config and they\\u2019ll light up for relevant commands.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Keeping humans in the loop\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Always request a plan before execution on wide\\u2011ranging changes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Ask for a commit breakdown ahead of time; review sequence matters.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Expect the agent to write tests when it modifies behavior. If it can\\u2019t, it should file an issue with a failing reproduction you can complete.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Common pitfalls and how to avoid them\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Letting unstaged changes confuse the agent: commit or stash before large runs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Accepting API schema guesses: provide types or a schema file; the agent will respect them.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Allowing hidden TODOs to creep in: fail builds on \",(0,n.jsx)(e.code,{children:\"TODO(\"}),\" unless a flag explicitly allows.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"A practical checklist\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"[ ] Base config with personas, gates, and conventions checked into the repo\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"[ ] Slash commands \",(0,n.jsx)(e.code,{children:\"/component\"}),\", \",(0,n.jsx)(e.code,{children:\"/migrate\"}),\", \",(0,n.jsx)(e.code,{children:\"/optimize\"}),\" (documented for the team)\"]}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] CI jobs for typecheck, lint, unit, and a quick e2e smoke\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Playwright smoke script for top 3 flows\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] A \\u201Cno hidden TODOs\\u201D rule or bot\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"SuperClaude + Claude Code shines when you treat it like power tooling, not an autopilot. Keep changes reviewable, tests close to code, and conventions explicit. Start with scaffolds, add migrations, then tackle performance. Over time you\\u2019ll build a personal automation layer that feels like you\\u2014but faster and more consistent on the work you used to dread.\"})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return k(x);})();\n;return Component;"
    },
    "_id": "blog/claude-code-superclaude-workflows.mdx",
    "_raw": {
      "sourceFilePath": "blog/claude-code-superclaude-workflows.mdx",
      "sourceFileName": "claude-code-superclaude-workflows.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/claude-code-superclaude-workflows"
    },
    "type": "Post",
    "readingTime": {
      "text": "6 min read",
      "minutes": 5.81,
      "time": 348600,
      "words": 1162
    },
    "slug": "claude-code-superclaude-workflows",
    "path": "blog/claude-code-superclaude-workflows",
    "filePath": "blog/claude-code-superclaude-workflows.mdx"
  },
  {
    "title": "Claude Code + VS Code: Power‑User Tips",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Turn Claude into a force multiplier inside VS Code: custom commands, MCP servers, and context tricks I actually use.",
    "tags": [
      "Claude Code",
      "VS Code",
      "MCP"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n- Put project‑specific `CLAUDE.md` at the repo root\n- Add `@DOCS/*.md` includes for architecture/context\n- Register Context7 + Sequential MCP for research + multi‑step reasoning\n- Create tasks.json wrappers so you can run `/optimize` hotkeys\n",
      "code": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of h(e))!x.call(t,r)&&r!==o&&c(t,r,{get:()=>e[r],enumerable:!(i=C(e,r))||i.enumerable});return t};var M=(t,e,o)=>(o=t!=null?m(p(t)):{},s(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),_=t=>s(c({},\"__esModule\",{value:!0}),t);var l=f((D,d)=>{d.exports=_jsx_runtime});var P={};j(P,{default:()=>u,frontmatter:()=>y});var n=M(l()),y={title:\"Claude Code + VS Code: Power\\u2011User Tips\",publishedAt:\"2025-08-08\",summary:\"Turn Claude into a force multiplier inside VS Code: custom commands, MCP servers, and context tricks I actually use.\",tags:[\"Claude Code\",\"VS Code\",\"MCP\"],featured:!1};function a(t){let e={code:\"code\",li:\"li\",ul:\"ul\",...t.components};return(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Put project\\u2011specific \",(0,n.jsx)(e.code,{children:\"CLAUDE.md\"}),\" at the repo root\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Add \",(0,n.jsx)(e.code,{children:\"@DOCS/*.md\"}),\" includes for architecture/context\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Register Context7 + Sequential MCP for research + multi\\u2011step reasoning\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Create tasks.json wrappers so you can run \",(0,n.jsx)(e.code,{children:\"/optimize\"}),\" hotkeys\"]}),`\n`]})}function u(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(a,{...t})}):a(t)}return _(P);})();\n;return Component;"
    },
    "_id": "blog/claude-code-vscode-integration-power-user-tips.mdx",
    "_raw": {
      "sourceFilePath": "blog/claude-code-vscode-integration-power-user-tips.mdx",
      "sourceFileName": "claude-code-vscode-integration-power-user-tips.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/claude-code-vscode-integration-power-user-tips"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.175,
      "time": 10500,
      "words": 35
    },
    "slug": "claude-code-vscode-integration-power-user-tips",
    "path": "blog/claude-code-vscode-integration-power-user-tips",
    "filePath": "blog/claude-code-vscode-integration-power-user-tips.mdx"
  },
  {
    "title": "Headless WordPress Caching Playbook",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "A practical cache strategy for WPGraphQL + Next.js: what to cache, where to purge, and how to avoid 500s.",
    "tags": [
      "Headless WordPress",
      "Next.js",
      "Performance"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n## TL;DR\n- Cache HTML at the edge for list pages.\n- Cache GraphQL responses with SWR/React Query on the client.\n- Purge selectively on post updates using webhooks.\n",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!f.call(t,s)&&s!==r&&a(t,s,{get:()=>e[s],enumerable:!(o=m(e,s))||o.enumerable});return t};var _=(t,e,r)=>(r=t!=null?u(x(t)):{},c(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>c(a({},\"__esModule\",{value:!0}),t);var i=g((L,l)=>{l.exports=_jsx_runtime});var P={};j(P,{default:()=>d,frontmatter:()=>y});var n=_(i()),y={title:\"Headless WordPress Caching Playbook\",publishedAt:\"2025-08-08\",summary:\"A practical cache strategy for WPGraphQL + Next.js: what to cache, where to purge, and how to avoid 500s.\",tags:[\"Headless WordPress\",\"Next.js\",\"Performance\"],featured:!1};function h(t){let e={h2:\"h2\",li:\"li\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"TL;DR\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Cache HTML at the edge for list pages.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cache GraphQL responses with SWR/React Query on the client.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Purge selectively on post updates using webhooks.\"}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return w(P);})();\n;return Component;"
    },
    "_id": "blog/headless-wordpress-caching-playbook.mdx",
    "_raw": {
      "sourceFilePath": "blog/headless-wordpress-caching-playbook.mdx",
      "sourceFileName": "headless-wordpress-caching-playbook.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/headless-wordpress-caching-playbook"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.145,
      "time": 8700,
      "words": 29
    },
    "slug": "headless-wordpress-caching-playbook",
    "path": "blog/headless-wordpress-caching-playbook",
    "filePath": "blog/headless-wordpress-caching-playbook.mdx"
  },
  {
    "title": "Headless WordPress on Next.js: A Real‑World Stack That Doesn’t Hurt",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Practical headless WordPress with Next.js using WPGraphQL, ISR, and editor‑friendly previews without yak shaving.",
    "tags": [
      "Headless WordPress",
      "Next.js",
      "WPGraphQL",
      "ISR"
    ],
    "draft": false,
    "featured": true,
    "body": {
      "raw": "\nIf you want headless WordPress without the drama, you need three things to feel boringly reliable: a clean schema (WPGraphQL), predictable caching (ISR + on‑demand revalidation), and previews that feel native to editors. The stack below is opinionated, repeatable, and battle‑tested on real launches.\n\n## Architecture at a glance\n\n- Authoring: WordPress with WPGraphQL, ACF, and ACF GraphQL\n- Delivery: Next.js App Router (RSC), edge cache via your host (e.g., Vercel)\n- Data: GraphQL queries with typed fragments; cache tags for precise invalidation\n- Previews: token‑based preview cookie → draft fetches (`cache: 'no-store'`)\n- DX: contentlayer for MDX docs/notes that live in the repo alongside CMS pages\n\nWhy this works: WordPress remains an excellent editor experience; Next.js gives you modern rendering, data ownership, and performance. The glue is WPGraphQL with a schema that you actually control.\n\n## The WordPress side: keep it simple, keep it consistent\n\nRequired plugins:\n\n- WPGraphQL\n- ACF Pro + WPGraphQL for ACF\n- (Optional) WPGraphQL Smart Cache (adds cache bust webhooks)\n- (Optional) WPGraphQL Yoast (if you use Yoast SEO fields)\n\nConventions that pay off later:\n\n- Use ACF field groups with consistent field keys and locations (e.g., “Post: SEO”, “Post: Hero”).\n- Favor primitive fields + repeaters over deeply nested flexible content until you truly need it.\n- Lock down roles and capabilities (Editors publish; Authors draft; no plugin installation in production).\n\n## Modeling content with GraphQL fragments\n\nKeep your queries small, typed, and reusable with fragments. Example post fragments:\n\n```graphql\nfragment SeoFields on Post {\n  seo: seo {\n    title\n    metaDesc\n    opengraphImage {\n      mediaItemUrl\n      altText\n    }\n  }\n}\n\nfragment PostCard on Post {\n  slug\n  title\n  date\n  excerpt\n  featuredImage {\n    node { sourceUrl altText }\n  }\n}\n\nquery PostBySlug($slug: ID!) {\n  post(id: $slug, idType: SLUG) {\n    ...SeoFields\n    content\n    ...PostCard\n  }\n}\n```\n\nPro tip: generate TypeScript types from your GraphQL schema (e.g., `graphql-code-generator`) so your Next.js code gets real intellisense and nullability.\n\n## Next.js data‑fetching: RSC by default, opt into client only when needed\n\nIn the App Router, fetch content in server components for maximum cache control. Tag your queries so you can surgically invalidate later.\n\n```ts\n// lib/wp.ts\nexport async function wpFetch<T>(query: string, variables?: Record<string, any>, tags: string[] = []) {\n  const res = await fetch(process.env.WP_GRAPHQL_ENDPOINT!, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query, variables }),\n    next: { revalidate: 300, tags }, // default 5 min ISR, override per call\n  })\n  if (!res.ok) throw new Error('WPGraphQL fetch failed')\n  const json = await res.json()\n  if (json.errors) throw new Error(JSON.stringify(json.errors))\n  return json.data as T\n}\n```\n\nUse it in a route segment:\n\n```tsx\n// app/blog/[slug]/page.tsx\nimport { wpFetch } from '@/lib/wp'\nimport { notFound } from 'next/navigation'\n\nexport default async function PostPage({ params }: { params: { slug: string } }) {\n  const data = await wpFetch<{ post: any }>(\n    /* GraphQL */ `query PostBySlug($slug: ID!) { post(id: $slug, idType: SLUG) { title date content } }`,\n    { slug: params.slug },\n    [\"post:\" + params.slug]\n  )\n  if (!data.post) return notFound()\n  return (\n    <article className=\"prose dark:prose-invert\">\n      <h1>{data.post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: data.post.content }} />\n    </article>\n  )\n}\n```\n\n## ISR + On‑demand revalidation you can reason about\n\nRules of thumb:\n\n- Landing/marketing pages: `revalidate: 60` during launches, longer otherwise.\n- Blog posts: `revalidate: 300` and tag by `post:{slug}` so you can revalidate just that one.\n- Taxonomies and lists: tag by `posts` and revalidate when anything publishes.\n\nWire revalidation from WordPress via webhook. You can use WPGraphQL Smart Cache or a tiny custom action.\n\n```php\n// functions.php (theme or mu-plugin)\nadd_action('transition_post_status', function($new_status, $old_status, $post) {\n  if ($post->post_type !== 'post') return;\n  if ($new_status === 'publish') {\n    wp_remote_post(getenv('NEXT_REVALIDATE_ENDPOINT'), [\n      'headers' => ['Authorization' => 'Bearer ' . getenv('REVALIDATE_TOKEN')],\n      'body' => ['slug' => $post->post_name],\n      'timeout' => 5\n    ]);\n  }\n}, 10, 3);\n```\n\n```ts\n// app/api/revalidate/route.ts\nimport { NextResponse } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n\nexport async function POST(req: Request) {\n  const auth = req.headers.get('authorization')\n  if (auth !== `Bearer ${process.env.REVALIDATE_TOKEN}`) return NextResponse.json({ ok: false }, { status: 401 })\n  const { slug } = await req.json()\n  revalidateTag('posts')\n  revalidateTag(`post:${slug}`)\n  return NextResponse.json({ ok: true })\n}\n```\n\n## Previews editors actually trust\n\nPreview flow in 3 steps:\n\n1) Editor clicks Preview in WP → WP opens your Next.js `/api/preview` with a one‑time token.\n2) Your handler validates token, sets a `preview` cookie, redirects to the draft URL.\n3) Pages read the cookie and fetch drafts with `cache: 'no-store'` and explicit `preview: true` inputs.\n\n```ts\n// app/api/preview/route.ts\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url)\n  const token = searchParams.get('token')\n  if (token !== process.env.WP_PREVIEW_TOKEN) return NextResponse.json({ ok: false }, { status: 401 })\n  cookies().set('wp-preview', '1', { httpOnly: true, secure: true, sameSite: 'lax' })\n  const to = searchParams.get('to') || '/'\n  return NextResponse.redirect(new URL(to, req.url))\n}\n```\n\n```ts\n// lib/wp-preview.ts\nexport async function wpPreviewFetch<T>(query: string, variables?: Record<string, any>) {\n  const res = await fetch(process.env.WP_GRAPHQL_ENDPOINT!, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query, variables }),\n    cache: 'no-store',\n  })\n  const json = await res.json()\n  return json.data as T\n}\n```\n\nIn your page, branch on cookie presence (RSC can read headers) and call the preview fetcher.\n\n## Media and images: avoid the slow path\n\n- Use `next/image` with the WordPress domain whitelisted in `next.config.js`.\n- Prefer the `sourceUrl` that maps to an optimized size (e.g., `medium_large`) when available.\n- If you control infra, put a thumbor/imgproxy in front of WordPress and serve every image through it.\n\n## Caching and performance guardrails\n\n- Tag everything; never revalidate the entire site unless truly necessary.\n- Avoid `cache: 'no-store'` except for previews and admin‑only views.\n- Batch GraphQL queries where sensible, but prefer smaller, targeted queries over a giant “one to rule them all.”\n- Consider a micro cache for GraphQL responses (e.g., 30–120 seconds) if your WordPress can’t handle traffic spikes.\n\n## Failure modes you should plan for\n\n- Slug changes: store previous slugs and emit `308` redirects.\n- Deleted posts: return 410 Gone, not 404, to help caches converge.\n- Partial downtime: if WordPress is flaky, keep serving ISR‑cached pages and degrade gracefully on lists.\n- Editor mistakes: required field nulls → guard in renderers; never let a missing image crash a page.\n\n## Security and operations\n\n- Disable file editing in WP (`DISALLOW_FILE_EDIT`), restrict plugin installs.\n- Put WP behind basic auth on non‑production environments.\n- Keep tokens secret; rotate your preview and revalidation tokens periodically.\n- Backups and staging refreshes: scripts, not manual checklists.\n\n## Testing the contract\n\n- Schema drift catches: generate TS types; run `codegen` in CI when schema changes.\n- Critical queries get smoke tests (does `postBySlug` return required fields?).\n- Visual preview baseline: lightweight Playwright test to load draft pages.\n\n## A pragmatic checklist\n\n- [ ] WPGraphQL, ACF, and ACF GraphQL installed and configured\n- [ ] GraphQL fragments for SEO, card, hero blocks\n- [ ] Revalidation endpoint secured and wired to WP webhook\n- [ ] Preview cookie flow implemented and tested end‑to‑end\n- [ ] Image domains whitelisted; large images optimized\n- [ ] Tags applied to all fetches; list + detail cached appropriately\n- [ ] Redirects for slug changes; 410 for deletions\n- [ ] Backups, staging auth, and CI schema checks\n\n## Conclusion\n\nHeadless WordPress doesn’t have to be a maze of plugins and mystery caches. Treat WordPress like a stable editor UI, keep the data model clean in GraphQL, let Next.js own rendering and caching, and give editors previews that look exactly like production. Start simple, tag your fetches, and add complexity only when a real production need shows up. That’s how you ship headless without the headache.\n",
      "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),w=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!f.call(r,i)&&i!==t&&a(r,i,{get:()=>e[i],enumerable:!(s=u(e,i))||s.enumerable});return r};var v=(r,e,t)=>(t=r!=null?p(m(r)):{},o(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),P=r=>o(a({},\"__esModule\",{value:!0}),r);var d=y((T,l)=>{l.exports=_jsx_runtime});var k={};w(k,{default:()=>h,frontmatter:()=>x});var n=v(d()),x={title:\"Headless WordPress on Next.js: A Real\\u2011World Stack That Doesn\\u2019t Hurt\",publishedAt:\"2025-08-08\",summary:\"Practical headless WordPress with Next.js using WPGraphQL, ISR, and editor\\u2011friendly previews without yak shaving.\",tags:[\"Headless WordPress\",\"Next.js\",\"WPGraphQL\",\"ISR\"],featured:!0};function c(r){let e={code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"If you want headless WordPress without the drama, you need three things to feel boringly reliable: a clean schema (WPGraphQL), predictable caching (ISR + on\\u2011demand revalidation), and previews that feel native to editors. The stack below is opinionated, repeatable, and battle\\u2011tested on real launches.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Architecture at a glance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Authoring: WordPress with WPGraphQL, ACF, and ACF GraphQL\"}),`\n`,(0,n.jsx)(e.li,{children:\"Delivery: Next.js App Router (RSC), edge cache via your host (e.g., Vercel)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Data: GraphQL queries with typed fragments; cache tags for precise invalidation\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Previews: token\\u2011based preview cookie \\u2192 draft fetches (\",(0,n.jsx)(e.code,{children:\"cache: 'no-store'\"}),\")\"]}),`\n`,(0,n.jsx)(e.li,{children:\"DX: contentlayer for MDX docs/notes that live in the repo alongside CMS pages\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Why this works: WordPress remains an excellent editor experience; Next.js gives you modern rendering, data ownership, and performance. The glue is WPGraphQL with a schema that you actually control.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"The WordPress side: keep it simple, keep it consistent\"}),`\n`,(0,n.jsx)(e.p,{children:\"Required plugins:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"WPGraphQL\"}),`\n`,(0,n.jsx)(e.li,{children:\"ACF Pro + WPGraphQL for ACF\"}),`\n`,(0,n.jsx)(e.li,{children:\"(Optional) WPGraphQL Smart Cache (adds cache bust webhooks)\"}),`\n`,(0,n.jsx)(e.li,{children:\"(Optional) WPGraphQL Yoast (if you use Yoast SEO fields)\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Conventions that pay off later:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use ACF field groups with consistent field keys and locations (e.g., \\u201CPost: SEO\\u201D, \\u201CPost: Hero\\u201D).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Favor primitive fields + repeaters over deeply nested flexible content until you truly need it.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Lock down roles and capabilities (Editors publish; Authors draft; no plugin installation in production).\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Modeling content with GraphQL fragments\"}),`\n`,(0,n.jsx)(e.p,{children:\"Keep your queries small, typed, and reusable with fragments. Example post fragments:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-graphql\",children:`fragment SeoFields on Post {\n  seo: seo {\n    title\n    metaDesc\n    opengraphImage {\n      mediaItemUrl\n      altText\n    }\n  }\n}\n\nfragment PostCard on Post {\n  slug\n  title\n  date\n  excerpt\n  featuredImage {\n    node { sourceUrl altText }\n  }\n}\n\nquery PostBySlug($slug: ID!) {\n  post(id: $slug, idType: SLUG) {\n    ...SeoFields\n    content\n    ...PostCard\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Pro tip: generate TypeScript types from your GraphQL schema (e.g., \",(0,n.jsx)(e.code,{children:\"graphql-code-generator\"}),\") so your Next.js code gets real intellisense and nullability.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Next.js data\\u2011fetching: RSC by default, opt into client only when needed\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the App Router, fetch content in server components for maximum cache control. Tag your queries so you can surgically invalidate later.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// lib/wp.ts\nexport async function wpFetch<T>(query: string, variables?: Record<string, any>, tags: string[] = []) {\n  const res = await fetch(process.env.WP_GRAPHQL_ENDPOINT!, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query, variables }),\n    next: { revalidate: 300, tags }, // default 5 min ISR, override per call\n  })\n  if (!res.ok) throw new Error('WPGraphQL fetch failed')\n  const json = await res.json()\n  if (json.errors) throw new Error(JSON.stringify(json.errors))\n  return json.data as T\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Use it in a route segment:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-tsx\",children:`// app/blog/[slug]/page.tsx\nimport { wpFetch } from '@/lib/wp'\nimport { notFound } from 'next/navigation'\n\nexport default async function PostPage({ params }: { params: { slug: string } }) {\n  const data = await wpFetch<{ post: any }>(\n    /* GraphQL */ \\`query PostBySlug($slug: ID!) { post(id: $slug, idType: SLUG) { title date content } }\\`,\n    { slug: params.slug },\n    [\"post:\" + params.slug]\n  )\n  if (!data.post) return notFound()\n  return (\n    <article className=\"prose dark:prose-invert\">\n      <h1>{data.post.title}</h1>\n      <div dangerouslySetInnerHTML={{ __html: data.post.content }} />\n    </article>\n  )\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"ISR + On\\u2011demand revalidation you can reason about\"}),`\n`,(0,n.jsx)(e.p,{children:\"Rules of thumb:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Landing/marketing pages: \",(0,n.jsx)(e.code,{children:\"revalidate: 60\"}),\" during launches, longer otherwise.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Blog posts: \",(0,n.jsx)(e.code,{children:\"revalidate: 300\"}),\" and tag by \",(0,n.jsx)(e.code,{children:\"post:{slug}\"}),\" so you can revalidate just that one.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Taxonomies and lists: tag by \",(0,n.jsx)(e.code,{children:\"posts\"}),\" and revalidate when anything publishes.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Wire revalidation from WordPress via webhook. You can use WPGraphQL Smart Cache or a tiny custom action.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-php\",children:`// functions.php (theme or mu-plugin)\nadd_action('transition_post_status', function($new_status, $old_status, $post) {\n  if ($post->post_type !== 'post') return;\n  if ($new_status === 'publish') {\n    wp_remote_post(getenv('NEXT_REVALIDATE_ENDPOINT'), [\n      'headers' => ['Authorization' => 'Bearer ' . getenv('REVALIDATE_TOKEN')],\n      'body' => ['slug' => $post->post_name],\n      'timeout' => 5\n    ]);\n  }\n}, 10, 3);\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// app/api/revalidate/route.ts\nimport { NextResponse } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n\nexport async function POST(req: Request) {\n  const auth = req.headers.get('authorization')\n  if (auth !== \\`Bearer \\${process.env.REVALIDATE_TOKEN}\\`) return NextResponse.json({ ok: false }, { status: 401 })\n  const { slug } = await req.json()\n  revalidateTag('posts')\n  revalidateTag(\\`post:\\${slug}\\`)\n  return NextResponse.json({ ok: true })\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Previews editors actually trust\"}),`\n`,(0,n.jsx)(e.p,{children:\"Preview flow in 3 steps:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Editor clicks Preview in WP \\u2192 WP opens your Next.js \",(0,n.jsx)(e.code,{children:\"/api/preview\"}),\" with a one\\u2011time token.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Your handler validates token, sets a \",(0,n.jsx)(e.code,{children:\"preview\"}),\" cookie, redirects to the draft URL.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Pages read the cookie and fetch drafts with \",(0,n.jsx)(e.code,{children:\"cache: 'no-store'\"}),\" and explicit \",(0,n.jsx)(e.code,{children:\"preview: true\"}),\" inputs.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// app/api/preview/route.ts\nimport { cookies } from 'next/headers'\nimport { NextResponse } from 'next/server'\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url)\n  const token = searchParams.get('token')\n  if (token !== process.env.WP_PREVIEW_TOKEN) return NextResponse.json({ ok: false }, { status: 401 })\n  cookies().set('wp-preview', '1', { httpOnly: true, secure: true, sameSite: 'lax' })\n  const to = searchParams.get('to') || '/'\n  return NextResponse.redirect(new URL(to, req.url))\n}\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// lib/wp-preview.ts\nexport async function wpPreviewFetch<T>(query: string, variables?: Record<string, any>) {\n  const res = await fetch(process.env.WP_GRAPHQL_ENDPOINT!, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query, variables }),\n    cache: 'no-store',\n  })\n  const json = await res.json()\n  return json.data as T\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In your page, branch on cookie presence (RSC can read headers) and call the preview fetcher.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Media and images: avoid the slow path\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"next/image\"}),\" with the WordPress domain whitelisted in \",(0,n.jsx)(e.code,{children:\"next.config.js\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Prefer the \",(0,n.jsx)(e.code,{children:\"sourceUrl\"}),\" that maps to an optimized size (e.g., \",(0,n.jsx)(e.code,{children:\"medium_large\"}),\") when available.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"If you control infra, put a thumbor/imgproxy in front of WordPress and serve every image through it.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Caching and performance guardrails\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Tag everything; never revalidate the entire site unless truly necessary.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Avoid \",(0,n.jsx)(e.code,{children:\"cache: 'no-store'\"}),\" except for previews and admin\\u2011only views.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Batch GraphQL queries where sensible, but prefer smaller, targeted queries over a giant \\u201Cone to rule them all.\\u201D\"}),`\n`,(0,n.jsx)(e.li,{children:\"Consider a micro cache for GraphQL responses (e.g., 30\\u2013120 seconds) if your WordPress can\\u2019t handle traffic spikes.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Failure modes you should plan for\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Slug changes: store previous slugs and emit \",(0,n.jsx)(e.code,{children:\"308\"}),\" redirects.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Deleted posts: return 410 Gone, not 404, to help caches converge.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Partial downtime: if WordPress is flaky, keep serving ISR\\u2011cached pages and degrade gracefully on lists.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Editor mistakes: required field nulls \\u2192 guard in renderers; never let a missing image crash a page.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Security and operations\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Disable file editing in WP (\",(0,n.jsx)(e.code,{children:\"DISALLOW_FILE_EDIT\"}),\"), restrict plugin installs.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Put WP behind basic auth on non\\u2011production environments.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Keep tokens secret; rotate your preview and revalidation tokens periodically.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Backups and staging refreshes: scripts, not manual checklists.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Testing the contract\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Schema drift catches: generate TS types; run \",(0,n.jsx)(e.code,{children:\"codegen\"}),\" in CI when schema changes.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Critical queries get smoke tests (does \",(0,n.jsx)(e.code,{children:\"postBySlug\"}),\" return required fields?).\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Visual preview baseline: lightweight Playwright test to load draft pages.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"A pragmatic checklist\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"[ ] WPGraphQL, ACF, and ACF GraphQL installed and configured\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] GraphQL fragments for SEO, card, hero blocks\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Revalidation endpoint secured and wired to WP webhook\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Preview cookie flow implemented and tested end\\u2011to\\u2011end\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Image domains whitelisted; large images optimized\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Tags applied to all fetches; list + detail cached appropriately\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Redirects for slug changes; 410 for deletions\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Backups, staging auth, and CI schema checks\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Headless WordPress doesn\\u2019t have to be a maze of plugins and mystery caches. Treat WordPress like a stable editor UI, keep the data model clean in GraphQL, let Next.js own rendering and caching, and give editors previews that look exactly like production. Start simple, tag your fetches, and add complexity only when a real production need shows up. That\\u2019s how you ship headless without the headache.\"})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(c,{...r})}):c(r)}return P(k);})();\n;return Component;"
    },
    "_id": "blog/headless-wordpress-nextjs-real-world-stack.mdx",
    "_raw": {
      "sourceFilePath": "blog/headless-wordpress-nextjs-real-world-stack.mdx",
      "sourceFileName": "headless-wordpress-nextjs-real-world-stack.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/headless-wordpress-nextjs-real-world-stack"
    },
    "type": "Post",
    "readingTime": {
      "text": "7 min read",
      "minutes": 6.38,
      "time": 382800,
      "words": 1276
    },
    "slug": "headless-wordpress-nextjs-real-world-stack",
    "path": "blog/headless-wordpress-nextjs-real-world-stack",
    "filePath": "blog/headless-wordpress-nextjs-real-world-stack.mdx"
  },
  {
    "title": "Hello World",
    "publishedAt": "2024-01-01T00:00:00.000Z",
    "summary": "Welcome to my blog! This is my first post where I introduce myself and share what I plan to write about.",
    "tags": [
      "introduction",
      "personal"
    ],
    "draft": false,
    "featured": true,
    "body": {
      "raw": "\n# Hello World!\n\nWelcome to my personal blog! I'm excited to start sharing my thoughts, experiences, and learnings in the world of software development.\n\n## What to Expect\n\nIn this blog, I'll be writing about:\n\n- **Software Development**: Tips, tricks, and best practices I've learned along the way\n- **Technology Deep Dives**: Exploring new frameworks, languages, and tools\n- **Career Growth**: Sharing insights about growing as a developer\n- **Side Projects**: Documenting my personal projects and what I've learned from them\n\n## About Me\n\nI'm a passionate software developer who loves creating solutions that make a difference. When I'm not coding, you can find me exploring new technologies, contributing to open source projects, or sharing knowledge with the developer community.\n\nStay tuned for more posts, and feel free to connect with me if you have any questions or just want to chat about tech!\n\n---\n\n*This is just the beginning. More exciting content coming soon!*",
      "code": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},l=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(s=g(e,r))||s.enumerable});return t};var y=(t,e,o)=>(o=t!=null?m(p(t)):{},l(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>l(i({},\"__esModule\",{value:!0}),t);var h=w((_,a)=>{a.exports=_jsx_runtime});var v={};x(v,{default:()=>d,frontmatter:()=>j});var n=y(h()),j={title:\"Hello World\",publishedAt:\"2024-01-01\",summary:\"Welcome to my blog! This is my first post where I introduce myself and share what I plan to write about.\",tags:[\"introduction\",\"personal\"],featured:!0};function c(t){let e={em:\"em\",h1:\"h1\",h2:\"h2\",hr:\"hr\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Hello World!\"}),`\n`,(0,n.jsx)(e.p,{children:\"Welcome to my personal blog! I'm excited to start sharing my thoughts, experiences, and learnings in the world of software development.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"What to Expect\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this blog, I'll be writing about:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Software Development\"}),\": Tips, tricks, and best practices I've learned along the way\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Technology Deep Dives\"}),\": Exploring new frameworks, languages, and tools\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Career Growth\"}),\": Sharing insights about growing as a developer\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Side Projects\"}),\": Documenting my personal projects and what I've learned from them\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"About Me\"}),`\n`,(0,n.jsx)(e.p,{children:\"I'm a passionate software developer who loves creating solutions that make a difference. When I'm not coding, you can find me exploring new technologies, contributing to open source projects, or sharing knowledge with the developer community.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Stay tuned for more posts, and feel free to connect with me if you have any questions or just want to chat about tech!\"}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"This is just the beginning. More exciting content coming soon!\"})})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}return b(v);})();\n;return Component;"
    },
    "_id": "blog/hello-world.mdx",
    "_raw": {
      "sourceFilePath": "blog/hello-world.mdx",
      "sourceFileName": "hello-world.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/hello-world"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.775,
      "time": 46500,
      "words": 155
    },
    "slug": "hello-world",
    "path": "blog/hello-world",
    "filePath": "blog/hello-world.mdx"
  },
  {
    "title": "ISR & Revalidation: A Practical Checklist",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Real-world guardrails for Next.js ISR: timeouts, on-demand revalidation, and failure modes.",
    "tags": [
      "Next.js",
      "Caching",
      "Reliability"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n## Checklist\n- Use headers for per-page revalidation insight\n- Log revalidateTag calls and failures\n- Add a backstop runtime cache for critical pages\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var a in e)r(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of f(e))!g.call(t,i)&&i!==a&&r(t,i,{get:()=>e[i],enumerable:!(l=m(e,i))||l.enumerable});return t};var _=(t,e,a)=>(a=t!=null?h(x(t)):{},s(e||!t||!t.__esModule?r(a,\"default\",{value:t,enumerable:!0}):a,t)),C=t=>s(r({},\"__esModule\",{value:!0}),t);var c=p((k,o)=>{o.exports=_jsx_runtime});var v={};j(v,{default:()=>u,frontmatter:()=>R});var n=_(c()),R={title:\"ISR & Revalidation: A Practical Checklist\",publishedAt:\"2025-08-08\",summary:\"Real-world guardrails for Next.js ISR: timeouts, on-demand revalidation, and failure modes.\",tags:[\"Next.js\",\"Caching\",\"Reliability\"],featured:!1};function d(t){let e={h2:\"h2\",li:\"li\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{children:\"Checklist\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use headers for per-page revalidation insight\"}),`\n`,(0,n.jsx)(e.li,{children:\"Log revalidateTag calls and failures\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add a backstop runtime cache for critical pages\"}),`\n`]})]})}function u(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return C(v);})();\n;return Component;"
    },
    "_id": "blog/isr-revalidation-checklist.mdx",
    "_raw": {
      "sourceFilePath": "blog/isr-revalidation-checklist.mdx",
      "sourceFileName": "isr-revalidation-checklist.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/isr-revalidation-checklist"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.12,
      "time": 7200,
      "words": 24
    },
    "slug": "isr-revalidation-checklist",
    "path": "blog/isr-revalidation-checklist",
    "filePath": "blog/isr-revalidation-checklist.mdx"
  },
  {
    "title": "MDX or CMS? When to Choose Which",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "If your site has editors, MDX is not a CMS. If your site has engineers, a CMS is not a codebase. Here’s my decision tree.",
    "tags": [
      "MDX",
      "CMS",
      "Content Strategy"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\nMDX and CMSes solve different problems that often get conflated. MDX shines when content is part of the codebase, shaped by the same tooling, versioned with the same PRs, and deployed in lock‑step with features. A CMS shines when publishing cadence and editorial workflows outweigh the benefits of “content as code.”\n\nHere’s how I decide, with real‑world scenarios, hybrids that work, and migration patterns that don’t wreck your roadmap.\n\n## The one‑page decision tree\n\nStart from the top; the first “Yes” that fits your situation tends to be the right call.\n\n1) Do non‑technical editors publish frequently (daily/weekly)?\n  - Yes → CMS.\n2) Is preview parity with production crucial for stakeholders?\n  - Yes → CMS (or a hybrid with CMS‑driven pages).\n3) Do you require translations/localization managed by editors?\n  - Yes → CMS (with a proper i18n workflow).\n4) Is content coupled to the code (release notes, developer docs, component examples)?\n  - Yes → MDX.\n5) Is the team comfortable reviewing content changes in Git PRs?\n  - Yes → MDX (possibly with a visual editor on top).\n6) Do you want to type‑check content and catch schema issues at build time?\n  - Yes → MDX (with contentlayer or similar).\n\nIf you fall on both sides, go hybrid.\n\n## MDX: when content is part of the product\n\nStrengths:\n\n- Types, lint, and tests work for content, too. Frontmatter can be typed. Inline components can be tested.\n- Docs that evolve with code. You can update examples and copy as you refactor.\n- Versioning and releases just work (e.g., docs tied to a library version).\n\nTrade‑offs:\n\n- Publishing requires engineering support (PRs, reviews, deploys).\n- Preview is often weaker or bespoke unless you add tooling.\n- Non‑technical editors will struggle without a visual layer.\n\nMDX sweet spots:\n\n- Technical blogs and devrel content that use live components.\n- Design system docs, prop tables, and interactive sandboxes.\n- Internal engineering handbooks where Git is already the norm.\n\nDX stack that scales:\n\n- contentlayer for typing/frontmatter → generated TS types for posts\n- MDX components for common patterns (Callout, Video, CodeDemo)\n- Lint rules to forbid raw HTML or unapproved components\n\n```ts\n// contentlayer.config.ts (MDX typing)\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'blog/**/*.mdx',\n  fields: {\n   title: { type: 'string', required: true },\n   publishedAt: { type: 'date', required: true },\n   summary: { type: 'string', required: true },\n   tags: { type: 'list', of: { type: 'string' }, default: [] },\n   featured: { type: 'boolean', default: false },\n  },\n}))\n```\n\n## CMS: when cadence and collaboration lead\n\nStrengths:\n\n- Roles, permissions, review workflows, and scheduling are built‑in.\n- Previews that match production without dev cycles.\n- Multi‑language editorial workflows with translation memory.\n\nTrade‑offs:\n\n- Another datastore and schema to maintain (and migrate).\n- Content is “at a distance” from code; drift can happen.\n- Vendor lock‑in or self‑hosting complexity, depending on choice.\n\nCMS sweet spots:\n\n- Marketing sites with frequent updates from non‑technical teams.\n- Multi‑country content where timezones and calendars matter.\n- Complex editorial production (legal review, embargoes, multi‑step approvals).\n\nChoosing a CMS:\n\n- Hosted headless (e.g., Hygraph, Contentful, Sanity) if you want low ops.\n- Self‑hosted (e.g., WordPress headless, Strapi) if you need data residency or custom workflows.\n\n## Hybrid patterns that work in practice\n\nYou don’t have to pick one. Split by audience and coupling:\n\n- CMS for public pages (Home, Pricing, Solutions, Case Studies)\n- MDX for dev docs, changelogs, and internal technical blogs\n- Shared components and tokens so both sides look and feel the same\n\nRouting strategy:\n\n- `/blog/*`: MDX (contentlayer)\n- `/customers/*`, `/solutions/*`: CMS‑driven (GraphQL/REST)\n- `/docs/*`: MDX with versioning and live examples\n\nPreview strategy:\n\n- CMS pages: native preview via CMS tokens → Next.js preview cookies\n- MDX pages: local preview behind an authoring branch or a Git‑based visual editor (e.g., a Netlify CMS/Tina overlay), or a “drafts” folder filtered out of production builds\n\nDesign continuity:\n\n- Central `MDXProvider` that exposes `Callout`, `Image`, `CodeBlock`\n- The same components are available to CMS renderers (portable text, rich text → React components)\n\n## Migration strategies (both directions)\n\nMDX → CMS:\n\n- Extract frontmatter fields into a CMS model (title, date, summary, tags).\n- Import MDX body as “rich text” or keep it as MDX field if the CMS supports it.\n- Keep slugs stable; record redirects in case of structure shifts.\n- Add a “code component allowlist” if you keep MDX inside the CMS.\n\nCMS → MDX:\n\n- Export entries as markdown/MDX; write a script to convert fields to frontmatter.\n- Store media assets locally or via a CDN with signed URLs.\n- Re‑implement rich text marks as MDX components where needed.\n\nGuardrails to avoid pain:\n\n- Never migrate without a slug map. Keep old → new.\n- Freeze content changes during the cutover window or maintain two‑way sync temporarily.\n- Validate with a crawler (broken links, missing images) before flipping DNS.\n\n## Cost and performance\n\n- MDX build costs are mostly CI time; serving is as fast as your host.\n- CMS adds a data fetch layer; use ISR/SSR wisely and tag cache keys.\n- For traffic spikes, CMS rate limits matter; keep a micro cache for list queries.\n\n## Team ergonomics\n\n- Engineers: MDX feels native. PR reviews include content; refactors include docs.\n- Editors: CMS feels native. They get drafts, schedules, and clear ownership.\n- Product: Hybrid lets each team move at its natural cadence without stepping on the other.\n\n## A quick checklist\n\n- [ ] Identify who publishes and how often\n- [ ] Decide what needs preview parity with production\n- [ ] Map which content is coupled to code vs. coupled to campaigns\n- [ ] Choose MDX/CMS/hybrid accordingly\n- [ ] Design the preview path(s) and cache strategy up front\n- [ ] Write down the migration/rollback plan before touching prod\n\n## Conclusion\n\nPick the tool that matches your publishing reality. MDX is unbeatable for code‑adjacent content and tight developer feedback loops. A CMS is irreplaceable for editorial workflows and non‑technical ownership. The best stacks mix both: engineers control the docs and developer surfaces with MDX, while marketing and comms publish confidently through a CMS—with shared components so the site reads as one voice. Start from the decision tree, prototype the preview path, and only then commit. You’ll save weeks of rework and keep both worlds happy.\n",
      "code": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var t in e)l(i,t,{get:e[t],enumerable:!0})},s=(i,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!g.call(i,r)&&r!==t&&l(i,r,{get:()=>e[r],enumerable:!(o=u(e,r))||o.enumerable});return i};var M=(i,e,t)=>(t=i!=null?p(f(i)):{},s(e||!i||!i.__esModule?l(t,\"default\",{value:i,enumerable:!0}):t,i)),b=i=>s(l({},\"__esModule\",{value:!0}),i);var a=w((k,d)=>{d.exports=_jsx_runtime});var C={};y(C,{default:()=>h,frontmatter:()=>v});var n=M(a()),v={title:\"MDX or CMS? When to Choose Which\",publishedAt:\"2025-08-08\",summary:\"If your site has editors, MDX is not a CMS. If your site has engineers, a CMS is not a codebase. Here\\u2019s my decision tree.\",tags:[\"MDX\",\"CMS\",\"Content Strategy\"],featured:!1};function c(i){let e={code:\"code\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"MDX and CMSes solve different problems that often get conflated. MDX shines when content is part of the codebase, shaped by the same tooling, versioned with the same PRs, and deployed in lock\\u2011step with features. A CMS shines when publishing cadence and editorial workflows outweigh the benefits of \\u201Ccontent as code.\\u201D\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s how I decide, with real\\u2011world scenarios, hybrids that work, and migration patterns that don\\u2019t wreck your roadmap.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"The one\\u2011page decision tree\"}),`\n`,(0,n.jsx)(e.p,{children:\"Start from the top; the first \\u201CYes\\u201D that fits your situation tends to be the right call.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Do non\\u2011technical editors publish frequently (daily/weekly)?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 CMS.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Is preview parity with production crucial for stakeholders?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 CMS (or a hybrid with CMS\\u2011driven pages).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Do you require translations/localization managed by editors?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 CMS (with a proper i18n workflow).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"4\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Is content coupled to the code (release notes, developer docs, component examples)?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 MDX.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Is the team comfortable reviewing content changes in Git PRs?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 MDX (possibly with a visual editor on top).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{start:\"6\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Do you want to type\\u2011check content and catch schema issues at build time?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Yes \\u2192 MDX (with contentlayer or similar).\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"If you fall on both sides, go hybrid.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"MDX: when content is part of the product\"}),`\n`,(0,n.jsx)(e.p,{children:\"Strengths:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Types, lint, and tests work for content, too. Frontmatter can be typed. Inline components can be tested.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Docs that evolve with code. You can update examples and copy as you refactor.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Versioning and releases just work (e.g., docs tied to a library version).\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Trade\\u2011offs:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Publishing requires engineering support (PRs, reviews, deploys).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Preview is often weaker or bespoke unless you add tooling.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Non\\u2011technical editors will struggle without a visual layer.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"MDX sweet spots:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Technical blogs and devrel content that use live components.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Design system docs, prop tables, and interactive sandboxes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Internal engineering handbooks where Git is already the norm.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"DX stack that scales:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"contentlayer for typing/frontmatter \\u2192 generated TS types for posts\"}),`\n`,(0,n.jsx)(e.li,{children:\"MDX components for common patterns (Callout, Video, CodeDemo)\"}),`\n`,(0,n.jsx)(e.li,{children:\"Lint rules to forbid raw HTML or unapproved components\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`// contentlayer.config.ts (MDX typing)\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'blog/**/*.mdx',\n  fields: {\n   title: { type: 'string', required: true },\n   publishedAt: { type: 'date', required: true },\n   summary: { type: 'string', required: true },\n   tags: { type: 'list', of: { type: 'string' }, default: [] },\n   featured: { type: 'boolean', default: false },\n  },\n}))\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"CMS: when cadence and collaboration lead\"}),`\n`,(0,n.jsx)(e.p,{children:\"Strengths:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Roles, permissions, review workflows, and scheduling are built\\u2011in.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Previews that match production without dev cycles.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Multi\\u2011language editorial workflows with translation memory.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Trade\\u2011offs:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Another datastore and schema to maintain (and migrate).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Content is \\u201Cat a distance\\u201D from code; drift can happen.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Vendor lock\\u2011in or self\\u2011hosting complexity, depending on choice.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"CMS sweet spots:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Marketing sites with frequent updates from non\\u2011technical teams.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Multi\\u2011country content where timezones and calendars matter.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Complex editorial production (legal review, embargoes, multi\\u2011step approvals).\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Choosing a CMS:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Hosted headless (e.g., Hygraph, Contentful, Sanity) if you want low ops.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Self\\u2011hosted (e.g., WordPress headless, Strapi) if you need data residency or custom workflows.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Hybrid patterns that work in practice\"}),`\n`,(0,n.jsx)(e.p,{children:\"You don\\u2019t have to pick one. Split by audience and coupling:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"CMS for public pages (Home, Pricing, Solutions, Case Studies)\"}),`\n`,(0,n.jsx)(e.li,{children:\"MDX for dev docs, changelogs, and internal technical blogs\"}),`\n`,(0,n.jsx)(e.li,{children:\"Shared components and tokens so both sides look and feel the same\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Routing strategy:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"/blog/*\"}),\": MDX (contentlayer)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"/customers/*\"}),\", \",(0,n.jsx)(e.code,{children:\"/solutions/*\"}),\": CMS\\u2011driven (GraphQL/REST)\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"/docs/*\"}),\": MDX with versioning and live examples\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Preview strategy:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"CMS pages: native preview via CMS tokens \\u2192 Next.js preview cookies\"}),`\n`,(0,n.jsx)(e.li,{children:\"MDX pages: local preview behind an authoring branch or a Git\\u2011based visual editor (e.g., a Netlify CMS/Tina overlay), or a \\u201Cdrafts\\u201D folder filtered out of production builds\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Design continuity:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Central \",(0,n.jsx)(e.code,{children:\"MDXProvider\"}),\" that exposes \",(0,n.jsx)(e.code,{children:\"Callout\"}),\", \",(0,n.jsx)(e.code,{children:\"Image\"}),\", \",(0,n.jsx)(e.code,{children:\"CodeBlock\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"The same components are available to CMS renderers (portable text, rich text \\u2192 React components)\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Migration strategies (both directions)\"}),`\n`,(0,n.jsx)(e.p,{children:\"MDX \\u2192 CMS:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Extract frontmatter fields into a CMS model (title, date, summary, tags).\"}),`\n`,(0,n.jsx)(e.li,{children:\"Import MDX body as \\u201Crich text\\u201D or keep it as MDX field if the CMS supports it.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Keep slugs stable; record redirects in case of structure shifts.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add a \\u201Ccode component allowlist\\u201D if you keep MDX inside the CMS.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"CMS \\u2192 MDX:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Export entries as markdown/MDX; write a script to convert fields to frontmatter.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Store media assets locally or via a CDN with signed URLs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Re\\u2011implement rich text marks as MDX components where needed.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Guardrails to avoid pain:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Never migrate without a slug map. Keep old \\u2192 new.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Freeze content changes during the cutover window or maintain two\\u2011way sync temporarily.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Validate with a crawler (broken links, missing images) before flipping DNS.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Cost and performance\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"MDX build costs are mostly CI time; serving is as fast as your host.\"}),`\n`,(0,n.jsx)(e.li,{children:\"CMS adds a data fetch layer; use ISR/SSR wisely and tag cache keys.\"}),`\n`,(0,n.jsx)(e.li,{children:\"For traffic spikes, CMS rate limits matter; keep a micro cache for list queries.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Team ergonomics\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Engineers: MDX feels native. PR reviews include content; refactors include docs.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Editors: CMS feels native. They get drafts, schedules, and clear ownership.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Product: Hybrid lets each team move at its natural cadence without stepping on the other.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"A quick checklist\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"[ ] Identify who publishes and how often\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Decide what needs preview parity with production\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Map which content is coupled to code vs. coupled to campaigns\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Choose MDX/CMS/hybrid accordingly\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Design the preview path(s) and cache strategy up front\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Write down the migration/rollback plan before touching prod\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Pick the tool that matches your publishing reality. MDX is unbeatable for code\\u2011adjacent content and tight developer feedback loops. A CMS is irreplaceable for editorial workflows and non\\u2011technical ownership. The best stacks mix both: engineers control the docs and developer surfaces with MDX, while marketing and comms publish confidently through a CMS\\u2014with shared components so the site reads as one voice. Start from the decision tree, prototype the preview path, and only then commit. You\\u2019ll save weeks of rework and keep both worlds happy.\"})]})}function h(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(c,{...i})}):c(i)}return b(C);})();\n;return Component;"
    },
    "_id": "blog/mdx-or-cms-when-to-choose-which.mdx",
    "_raw": {
      "sourceFilePath": "blog/mdx-or-cms-when-to-choose-which.mdx",
      "sourceFileName": "mdx-or-cms-when-to-choose-which.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/mdx-or-cms-when-to-choose-which"
    },
    "type": "Post",
    "readingTime": {
      "text": "6 min read",
      "minutes": 5.295,
      "time": 317700,
      "words": 1059
    },
    "slug": "mdx-or-cms-when-to-choose-which",
    "path": "blog/mdx-or-cms-when-to-choose-which",
    "filePath": "blog/mdx-or-cms-when-to-choose-which.mdx"
  },
  {
    "title": "Next.js App Router: The Hard Parts I Wish I’d Known",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Real-world App Router snags: caching, streaming, server actions, and how to avoid shooting yourself in the foot.",
    "tags": [
      "Next.js",
      "App Router",
      "Performance",
      "Caching"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n> App Router is fantastic—until you mix cache boundaries, server actions, and dynamic routes. Here are the traps and how I defuse them.\n\n## 1) Caching is a contract\n- `fetch(..., { cache: 'no-store' })` wins over everything\n- `revalidate` propagates, but children can still opt out\n- On-demand revalidation: keep IDs stable or you’ll miss entries\n\n## 2) Streaming ≠ free\n- Use Suspense for expensive components only\n- Avoid “spinner waterfalls”; group Suspense boundaries\n\n## 3) Server Actions gotchas\n- Treat them like RPC: validate inputs (Zod), handle errors\n- Don’t leak secrets through thrown errors\n\n## 4) SEO and OG images\n- Use dynamic OG routes, cache for ~1 day, purge on publish\n\n## My default checklist\n- [ ] Explicit cache policy per route\n- [ ] All actions validated\n- [ ] Streaming boundaries are intentional\n- [ ] Logs for revalidate events\n",
      "code": "var Component=(()=>{var u=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var i in e)l(r,i,{get:e[i],enumerable:!0})},c=(r,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(r,t)&&t!==i&&l(r,t,{get:()=>e[t],enumerable:!(o=p(e,t))||o.enumerable});return r};var y=(r,e,i)=>(i=r!=null?u(f(r)):{},c(e||!r||!r.__esModule?l(i,\"default\",{value:r,enumerable:!0}):i,r)),b=r=>c(l({},\"__esModule\",{value:!0}),r);var s=v((k,a)=>{a.exports=_jsx_runtime});var A={};x(A,{default:()=>h,frontmatter:()=>w});var n=y(s()),w={title:\"Next.js App Router: The Hard Parts I Wish I\\u2019d Known\",publishedAt:\"2025-08-08\",summary:\"Real-world App Router snags: caching, streaming, server actions, and how to avoid shooting yourself in the foot.\",tags:[\"Next.js\",\"App Router\",\"Performance\",\"Caching\"],featured:!1};function d(r){let e={blockquote:\"blockquote\",code:\"code\",h2:\"h2\",li:\"li\",p:\"p\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"App Router is fantastic\\u2014until you mix cache boundaries, server actions, and dynamic routes. Here are the traps and how I defuse them.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"1) Caching is a contract\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"fetch(..., { cache: 'no-store' })\"}),\" wins over everything\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"revalidate\"}),\" propagates, but children can still opt out\"]}),`\n`,(0,n.jsx)(e.li,{children:\"On-demand revalidation: keep IDs stable or you\\u2019ll miss entries\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"2) Streaming \\u2260 free\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use Suspense for expensive components only\"}),`\n`,(0,n.jsx)(e.li,{children:\"Avoid \\u201Cspinner waterfalls\\u201D; group Suspense boundaries\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"3) Server Actions gotchas\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Treat them like RPC: validate inputs (Zod), handle errors\"}),`\n`,(0,n.jsx)(e.li,{children:\"Don\\u2019t leak secrets through thrown errors\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"4) SEO and OG images\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Use dynamic OG routes, cache for ~1 day, purge on publish\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{children:\"My default checklist\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"[ ] Explicit cache policy per route\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] All actions validated\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Streaming boundaries are intentional\"}),`\n`,(0,n.jsx)(e.li,{children:\"[ ] Logs for revalidate events\"}),`\n`]})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return b(A);})();\n;return Component;"
    },
    "_id": "blog/nextjs-app-router-hard-parts.mdx",
    "_raw": {
      "sourceFilePath": "blog/nextjs-app-router-hard-parts.mdx",
      "sourceFileName": "nextjs-app-router-hard-parts.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/nextjs-app-router-hard-parts"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.74,
      "time": 44400,
      "words": 148
    },
    "slug": "nextjs-app-router-hard-parts",
    "path": "blog/nextjs-app-router-hard-parts",
    "filePath": "blog/nextjs-app-router-hard-parts.mdx"
  },
  {
    "title": "Next.js App Router: Routing Tricks You Won’t Find in the Docs",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Edge cases and patterns for layouts, parallel routes, and route groups that keep code sane.",
    "tags": [
      "Next.js",
      "App Router",
      "Routing"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n- Use route groups `(...)` to share providers without polluting URLs\n- Parallel routes shine for A/B content and preview panes\n- Co-locate page data loaders with segments; avoid cross-import spaghetti\n",
      "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var n in e)r(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!g.call(t,s)&&s!==n&&r(t,s,{get:()=>e[s],enumerable:!(a=h(e,s))||a.enumerable});return t};var _=(t,e,n)=>(n=t!=null?p(x(t)):{},i(e||!t||!t.__esModule?r(n,\"default\",{value:t,enumerable:!0}):n,t)),R=t=>i(r({},\"__esModule\",{value:!0}),t);var u=f((y,l)=>{l.exports=_jsx_runtime});var A={};j(A,{default:()=>d,frontmatter:()=>w});var o=_(u()),w={title:\"Next.js App Router: Routing Tricks You Won\\u2019t Find in the Docs\",publishedAt:\"2025-08-08\",summary:\"Edge cases and patterns for layouts, parallel routes, and route groups that keep code sane.\",tags:[\"Next.js\",\"App Router\",\"Routing\"],featured:!1};function c(t){let e={code:\"code\",li:\"li\",ul:\"ul\",...t.components};return(0,o.jsxs)(e.ul,{children:[`\n`,(0,o.jsxs)(e.li,{children:[\"Use route groups \",(0,o.jsx)(e.code,{children:\"(...)\"}),\" to share providers without polluting URLs\"]}),`\n`,(0,o.jsx)(e.li,{children:\"Parallel routes shine for A/B content and preview panes\"}),`\n`,(0,o.jsx)(e.li,{children:\"Co-locate page data loaders with segments; avoid cross-import spaghetti\"}),`\n`]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}return R(A);})();\n;return Component;"
    },
    "_id": "blog/nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs.mdx",
    "_raw": {
      "sourceFilePath": "blog/nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs.mdx",
      "sourceFileName": "nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.155,
      "time": 9300,
      "words": 31
    },
    "slug": "nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs",
    "path": "blog/nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs",
    "filePath": "blog/nextjs-app-router-routing-tricks-you-won-t-find-in-the-docs.mdx"
  },
  {
    "title": "Next.js Image Optimization in the Real World",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Not a docs rehash—practical patterns for `next/image`: CDNs, aggressive caching, and avoiding layout shifts.",
    "tags": [
      "Next.js",
      "Performance",
      "Images"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n- Use `fill` + intrinsic aspect ratios for cards and grids\n- Pre-size hero images; don’t lazy-load above the fold\n- Cache at CDN with 1d TTL; purge on publish\n- For CMS origins, proxy via Edge to normalize headers\n",
      "code": "var Component=(()=>{var m=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of f(e))!x.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(a=u(e,r))||a.enumerable});return t};var C=(t,e,i)=>(i=t!=null?m(g(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),_=t=>s(o({},\"__esModule\",{value:!0}),t);var c=p((z,l)=>{l.exports=_jsx_runtime});var N={};j(N,{default:()=>h,frontmatter:()=>y});var n=C(c()),y={title:\"Next.js Image Optimization in the Real World\",publishedAt:\"2025-08-08\",summary:\"Not a docs rehash\\u2014practical patterns for `next/image`: CDNs, aggressive caching, and avoiding layout shifts.\",tags:[\"Next.js\",\"Performance\",\"Images\"],featured:!1};function d(t){let e={code:\"code\",li:\"li\",ul:\"ul\",...t.components};return(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"fill\"}),\" + intrinsic aspect ratios for cards and grids\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Pre-size hero images; don\\u2019t lazy-load above the fold\"}),`\n`,(0,n.jsx)(e.li,{children:\"Cache at CDN with 1d TTL; purge on publish\"}),`\n`,(0,n.jsx)(e.li,{children:\"For CMS origins, proxy via Edge to normalize headers\"}),`\n`]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(d,{...t})}):d(t)}return _(N);})();\n;return Component;"
    },
    "_id": "blog/nextjs-image-optimization-in-the-real-world.mdx",
    "_raw": {
      "sourceFilePath": "blog/nextjs-image-optimization-in-the-real-world.mdx",
      "sourceFileName": "nextjs-image-optimization-in-the-real-world.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/nextjs-image-optimization-in-the-real-world"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.2,
      "time": 12000,
      "words": 40
    },
    "slug": "nextjs-image-optimization-in-the-real-world",
    "path": "blog/nextjs-image-optimization-in-the-real-world",
    "filePath": "blog/nextjs-image-optimization-in-the-real-world.mdx"
  },
  {
    "title": "Tailwind Design Tokens in Large Teams",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Bring sanity to Tailwind at scale with CSS variables, theming, and a disciplined token layer.",
    "tags": [
      "TailwindCSS",
      "Architecture",
      "DX"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\n## Why tokens\n- Consistent spacing, color, and typography\n- Easy theming and brand swaps\n- Guardrails for contributors\n",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),y=(t,n)=>{for(var i in n)a(t,i,{get:n[i],enumerable:!0})},l=(t,n,i,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of g(n))!x.call(t,r)&&r!==i&&a(t,r,{get:()=>n[r],enumerable:!(s=m(n,r))||s.enumerable});return t};var _=(t,n,i)=>(i=t!=null?u(p(t)):{},l(n||!t||!t.__esModule?a(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>l(a({},\"__esModule\",{value:!0}),t);var c=f((b,o)=>{o.exports=_jsx_runtime});var C={};y(C,{default:()=>h,frontmatter:()=>j});var e=_(c()),j={title:\"Tailwind Design Tokens in Large Teams\",publishedAt:\"2025-08-08\",summary:\"Bring sanity to Tailwind at scale with CSS variables, theming, and a disciplined token layer.\",tags:[\"TailwindCSS\",\"Architecture\",\"DX\"],featured:!1};function d(t){let n={h2:\"h2\",li:\"li\",ul:\"ul\",...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"Why tokens\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"Consistent spacing, color, and typography\"}),`\n`,(0,e.jsx)(n.li,{children:\"Easy theming and brand swaps\"}),`\n`,(0,e.jsx)(n.li,{children:\"Guardrails for contributors\"}),`\n`]})]})}function h(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(d,{...t})}):d(t)}return w(C);})();\n;return Component;"
    },
    "_id": "blog/tailwind-design-tokens-in-large-teams.mdx",
    "_raw": {
      "sourceFilePath": "blog/tailwind-design-tokens-in-large-teams.mdx",
      "sourceFileName": "tailwind-design-tokens-in-large-teams.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/tailwind-design-tokens-in-large-teams"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.095,
      "time": 5700,
      "words": 19
    },
    "slug": "tailwind-design-tokens-in-large-teams",
    "path": "blog/tailwind-design-tokens-in-large-teams",
    "filePath": "blog/tailwind-design-tokens-in-large-teams.mdx"
  },
  {
    "title": "TailwindCSS Architecture: Beyond Utility Classes",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "From prototypes to production systems—how I structure Tailwind projects without turning them into class soup.",
    "tags": [
      "TailwindCSS",
      "CSS Architecture",
      "Design Systems"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\nTailwind is a great low-level tool. Architecture makes it a great system.\n\n## My rules of thumb\n\n### 1) Co-locate intent with components\n- Create lightweight wrappers: `Button`, `Card`, `Badge`\n- Use `@apply` sparingly—prefer composition\n\n### 2) Design tokens > ad-hoc colors\n- Define palette, radii, spacing once\n- Expose via `theme.extend`\n\n### 3) Variants with class-variance-authority\n- Encode state (size, intent, layout) without props explosion\n\n```ts\nimport { cva } from 'class-variance-authority'\n\nexport const button = cva(\n  'inline-flex items-center justify-center rounded-md font-medium transition-colors',\n  {\n    variants: {\n      intent: {\n        primary: 'bg-blue-600 text-white hover:bg-blue-700',\n        ghost: 'bg-transparent hover:bg-gray-100',\n      },\n      size: {\n        sm: 'h-8 px-3 text-sm',\n        md: 'h-10 px-4',\n        lg: 'h-12 px-6 text-lg',\n      },\n    },\n    defaultVariants: { intent: 'primary', size: 'md' },\n  }\n)\n```\n\n### 4) The 80/20\n- 80% utilities, 20% components\n- No more than ~10 custom CSS files in most apps\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!x.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return t};var w=(t,e,i)=>(i=t!=null?u(g(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),C=t=>s(o({},\"__esModule\",{value:!0}),t);var a=y((j,c)=>{c.exports=_jsx_runtime});var v={};f(v,{default:()=>d,frontmatter:()=>b});var n=w(a()),b={title:\"TailwindCSS Architecture: Beyond Utility Classes\",publishedAt:\"2025-08-08\",summary:\"From prototypes to production systems\\u2014how I structure Tailwind projects without turning them into class soup.\",tags:[\"TailwindCSS\",\"CSS Architecture\",\"Design Systems\"],featured:!1};function h(t){let e={code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Tailwind is a great low-level tool. Architecture makes it a great system.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"My rules of thumb\"}),`\n`,(0,n.jsx)(e.h3,{children:\"1) Co-locate intent with components\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Create lightweight wrappers: \",(0,n.jsx)(e.code,{children:\"Button\"}),\", \",(0,n.jsx)(e.code,{children:\"Card\"}),\", \",(0,n.jsx)(e.code,{children:\"Badge\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Use \",(0,n.jsx)(e.code,{children:\"@apply\"}),\" sparingly\\u2014prefer composition\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"2) Design tokens > ad-hoc colors\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Define palette, radii, spacing once\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Expose via \",(0,n.jsx)(e.code,{children:\"theme.extend\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"3) Variants with class-variance-authority\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Encode state (size, intent, layout) without props explosion\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ts\",children:`import { cva } from 'class-variance-authority'\n\nexport const button = cva(\n  'inline-flex items-center justify-center rounded-md font-medium transition-colors',\n  {\n    variants: {\n      intent: {\n        primary: 'bg-blue-600 text-white hover:bg-blue-700',\n        ghost: 'bg-transparent hover:bg-gray-100',\n      },\n      size: {\n        sm: 'h-8 px-3 text-sm',\n        md: 'h-10 px-4',\n        lg: 'h-12 px-6 text-lg',\n      },\n    },\n    defaultVariants: { intent: 'primary', size: 'md' },\n  }\n)\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"4) The 80/20\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"80% utilities, 20% components\"}),`\n`,(0,n.jsx)(e.li,{children:\"No more than ~10 custom CSS files in most apps\"}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return C(v);})();\n;return Component;"
    },
    "_id": "blog/tailwindcss-architecture-beyond-utility-classes.mdx",
    "_raw": {
      "sourceFilePath": "blog/tailwindcss-architecture-beyond-utility-classes.mdx",
      "sourceFileName": "tailwindcss-architecture-beyond-utility-classes.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/tailwindcss-architecture-beyond-utility-classes"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.71,
      "time": 42600,
      "words": 142
    },
    "slug": "tailwindcss-architecture-beyond-utility-classes",
    "path": "blog/tailwindcss-architecture-beyond-utility-classes",
    "filePath": "blog/tailwindcss-architecture-beyond-utility-classes.mdx"
  },
  {
    "title": "WordPress Preview Links, Done Right (No Plugin Spaghetti)",
    "publishedAt": "2025-08-08T00:00:00.000Z",
    "summary": "Secure, editor‑friendly preview links for headless WordPress without turning your stack into a haunted house.",
    "tags": [
      "Headless WordPress",
      "Previews",
      "Security"
    ],
    "draft": false,
    "featured": false,
    "body": {
      "raw": "\nThe preview story doesn’t have to be scary. Tokenize it, timebox it, and keep editors happy.\n\n## Recipe\n1. Add a per‑post `preview_token` meta field\n2. WP: Add a REST endpoint to validate token + slug\n3. Next.js: `/api/preview` reads token → sets cookie → redirects\n\n### Why this works\n- No plugin mega‑config\n- Tokens can be rotated per post\n- Auditable and debuggable\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),x=(n,e)=>{for(var i in e)o(n,i,{get:e[i],enumerable:!0})},d=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(n,r)&&r!==i&&o(n,r,{get:()=>e[r],enumerable:!(s=p(e,r))||s.enumerable});return n};var w=(n,e,i)=>(i=n!=null?u(g(n)):{},d(e||!n||!n.__esModule?o(i,\"default\",{value:n,enumerable:!0}):i,n)),y=n=>d(o({},\"__esModule\",{value:!0}),n);var a=k((P,l)=>{l.exports=_jsx_runtime});var _={};x(_,{default:()=>h,frontmatter:()=>v});var t=w(a()),v={title:\"WordPress Preview Links, Done Right (No Plugin Spaghetti)\",publishedAt:\"2025-08-08\",summary:\"Secure, editor\\u2011friendly preview links for headless WordPress without turning your stack into a haunted house.\",tags:[\"Headless WordPress\",\"Previews\",\"Security\"],featured:!1};function c(n){let e={code:\"code\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"The preview story doesn\\u2019t have to be scary. Tokenize it, timebox it, and keep editors happy.\"}),`\n`,(0,t.jsx)(e.h2,{children:\"Recipe\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Add a per\\u2011post \",(0,t.jsx)(e.code,{children:\"preview_token\"}),\" meta field\"]}),`\n`,(0,t.jsx)(e.li,{children:\"WP: Add a REST endpoint to validate token + slug\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Next.js: \",(0,t.jsx)(e.code,{children:\"/api/preview\"}),\" reads token \\u2192 sets cookie \\u2192 redirects\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{children:\"Why this works\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"No plugin mega\\u2011config\"}),`\n`,(0,t.jsx)(e.li,{children:\"Tokens can be rotated per post\"}),`\n`,(0,t.jsx)(e.li,{children:\"Auditable and debuggable\"}),`\n`]})]})}function h(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}return y(_);})();\n;return Component;"
    },
    "_id": "blog/wordpress-preview-links-done-right.mdx",
    "_raw": {
      "sourceFilePath": "blog/wordpress-preview-links-done-right.mdx",
      "sourceFileName": "wordpress-preview-links-done-right.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/wordpress-preview-links-done-right"
    },
    "type": "Post",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.325,
      "time": 19500,
      "words": 65
    },
    "slug": "wordpress-preview-links-done-right",
    "path": "blog/wordpress-preview-links-done-right",
    "filePath": "blog/wordpress-preview-links-done-right.mdx"
  }
]